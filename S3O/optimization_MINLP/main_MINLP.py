"""
MAIN_MINLP

Created on Tue Oct 06 2020
@author: nikov@kt.dtu.dk

Main script for performing superstructure optimization by employing ALAMO surrogate models for the MINLP and the BARON solver

Routine containing the following files & functions:
main_MILP.py

"""
## Initialization
from pyomo.environ import *
from pyomo.core import *
import pandas as pd
import os
from minlp_functions import import_csv, export_csv
import numpy as np
from time import perf_counter


cIDs = [1,2,5,6] # flowsheet
Ns = [500, 1000] # MC sample number of flowsheet simulations
objective = "mxp" ## mxp = maximum xylitol production

for N in Ns:
    for cID in cIDs:
        t1 = perf_counter()

        path = os.getcwd()
        filepath_s = os.path.dirname(path)+"\modelling_DTR\C{}dtr_{}.csv".format(cID,N)
        filepath_p = [os.path.dirname(path)+"\simulations\C{}i_{}.csv".format(cID,N),
                      os.path.dirname(path)+"simulations\C{}o_{}.csv".format(cID,N)]

        filepath_x = os.path.dirname(path)+"optimization_MINLP\C{}_x_{}.csv".format(cID,N)
        filepath_y = os.path.dirname(path)+"optimization_MINLP\C{}_y_{}.csv".format(cID,N)
        filepath_t = os.path.dirname(path)+"optimization_MINLP\C{}_time_{}.csv".format(cID,N)

        dim = (5,4)
        solver = "baron"
        error = 0.001

        ylconstraints = np.array([0., 0., 0., 0.1])
        yuconstraints = np.array([100, 0.5, 0.5, 5])


        yOBJ = 1 # Pyomo Index, not python

        ## initialize main dictionary "dictData"
        dictData = dict()
        dictData["filepath_p"] = filepath_p
        dictData["filepath_s"] = filepath_s
        dictData["filepath_x"] = filepath_x
        dictData["filepath_y"] = filepath_y
        dictData["filepath_t"] = filepath_t

        dictData["dim"] = dim
        dictData["solver"] = solver


        ## 1. IMPORT DATA
        dictData = import_csv(dictData)

        #plot_tri(dictData)

        ## Number of Simplices and Points
        NSimplices = len(dictData["simplices"])
        NPoints = len(dictData["xpoints"])

        ## Dimensions of input and output
        XDim = dictData["dim"][0]
        YDim = dictData["dim"][1]

        ## Simplex and point data
        simplices = dictData["simplices"]
        xpoints = dictData["xpoints"]
        ypoints = dictData["ypoints"]


        ## 2. OPTIMIZATION PROBLEM
        model = ConcreteModel()

        ## 2.1 SETS
        model.dX = RangeSet(1, XDim)
        model.dY = RangeSet(1, YDim)

        ## 2.2 VARIABLES
        ## Variable for X
        lbx = dict()
        ubx = dict()

        for j in range(dim[0]):
            lbx[j+1] = np.amin(xpoints[:, j])
            ubx[j+1] = np.amax(xpoints[:, j])


        def Xbounds(model, i):
           return (lbx[i], ubx[i])

        model.X= Var(model.dX, domain=Reals, bounds=Xbounds)

        ## Variable for Y
        lby = dict()
        uby = dict()

        for j in range(dim[1]):
            lby[j+1] = ylconstraints[j]
            uby[j+1] = yuconstraints[j]


        def Ybounds(model, i):
           return (lby[i], uby[i])

        model.Y = Var(model.dY, domain=Reals, bounds=Ybounds)

        ## 2.3 CONSTRAINTS
        #T_PT acid inoc t_FX v_EX

        if N == 500:
            if cID == 1:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == 3.2423946221988777516287 * model.X[1] - 1250.1120836488048553292 * model.X[3] + 7.8132663861661342252773 * model.X[4] - 222364147.00778430700302 * model.X[5] - 689.60418818150571951264 * log(model.X[1]) + 1312.3145728840938772919 * log(model.X[3]) - 610.52585877595083729830 * log(model.X[4]) + 450859371.91598182916641 * log(model.X[5]) - 13.886098371763784697919 * exp(model.X[3]) - 1128285.0169200389645994 * exp(model.X[5]) - 4.1954377168570298195505 * model.X[2]**-1 - 140.03689292318367165535 * model.X[3]**-1 - 9826.1123675453291070880 * model.X[4]**-1 + 225436982.73884418606758 * model.X[5]**-1 + 155.72686140397433973703 * model.X[3]**2 - 0.16618004825422229286946e-1 * model.X[4]**2 + 4208.5454104935442956048 * (model.X[3]*model.X[4])**-1 + 0.61658819032137487788173e-6 * (model.X[1]*model.X[4])**2 + 1.4593201688832255769057 * (model.X[2]*model.X[3])**2 + 0.20432335611098928485063 * (model.X[3]*model.X[4])**2 - 0.22020211891153533383114e-2 * (model.X[3]*model.X[4])**3 + 0.74776842868871496556541e-5 * (model.X[3]*model.X[4])**4 - 0.43084305965959731189556e-4 * (model.X[1]*model.X[2]*model.X[3])**2 - 0.34181069851317976596801e-5 * (model.X[1]*model.X[4]*model.X[5])**2 - 0.36934819981513186291575e-3 * (model.X[2]*model.X[3]*model.X[4])**2 - 1978.1426040071464740322 * (model.X[1]/model.X[4])**-1 + 28.250895740450854276560 * (model.X[3]/model.X[4])**-1 + 1519.8747392943250815733 * (model.X[4]/model.X[3])**-1 - 0.17130617061193453842805 * (model.X[4]/model.X[3])**2 + 0.59047719384290229226175e-3 * (model.X[4]/model.X[3])**3

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == - 0.56263311671674509639729 * model.X[2] - 22.756734396373257567348 * model.X[3] + 1.2892749755869339356451 * model.X[4] - 4552427.9142429912462831 * model.X[5] + 1.1457997872012586348944 * log(model.X[2]) + 23.808887588089007181225 * log(model.X[3]) - 37.521781526754260482903 * log(model.X[4]) + 679078.04274120833724737 * log(model.X[5]) - 0.26329888629678560585390 * exp(model.X[3]) + 1724774.0241697551682591 * exp(model.X[5]) + 0.52282331128476189352483 * model.X[2]**-1 - 3.1885107458243240330376 * model.X[3]**-1 - 342.84115380951709539659 * model.X[4]**-1 + 2.7667535988708782390688 * model.X[3]**2 - 0.99689785124883554395803e-2 * model.X[4]**2 + 0.11453537321049747394713e-7 * model.X[4]**5 - 135876.56011462531751022 * model.X[5]**6 - 2390.0074775763914658455 * (model.X[1]*model.X[4])**-1 + 81.638037494946431138487 * (model.X[3]*model.X[4])**-1 + 0.24806924436715862006470e-5 * (model.X[1]*model.X[3])**2 + 0.49003164685036924852479e-1 * (model.X[2]*model.X[3])**2 + 0.68724410441994954299068e-4 * (model.X[2]*model.X[4])**2 + 0.38084611362541151598216e-2 * (model.X[3]*model.X[4])**2 - 0.41921359369888376925073e-2 * (model.X[4]*model.X[5])**2 - 0.66374406547711583353956e-6 * (model.X[2]*model.X[4])**3 - 0.40979042967143442346197e-4 * (model.X[3]*model.X[4])**3 + 0.13889253696013316317082e-6 * (model.X[3]*model.X[4])**4 - 0.13926703324401384126072e-5 * (model.X[1]*model.X[2]*model.X[3])**2 + 0.30179204325179985343936e-4 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.42072263537014964012630e-6 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.11758181986824822548846e-8 * (model.X[2]*model.X[3]*model.X[4])**4 + 0.54022453387255675583134 * (model.X[3]/model.X[4])**-1 + 29.175475857381663047363 * (model.X[4]/model.X[3])**-1 - 0.32997538131007866750444e-2 * (model.X[4]/model.X[3])**2 + 0.11600535744096796597125e-4 * (model.X[4]/model.X[3])**3

                def Y2_constraint(m):
                    return model.Y[2] == 5.8050282116334157578308 * model.X[1] - 12.469513659733211241587 * model.X[2] + 0.53168773609534834834189e-1 * model.X[3] + 0.55711783161048042053998e-2 * model.X[4] + 870186.79258250060956925 * model.X[5] + 4013.0826024792690986942 * log(model.X[1]) + 3.1630882476209949416557 * log(model.X[2]) - 1.3276851610474809106677 * log(model.X[3]) - 0.57943767686244795900308 * log(model.X[4]) - 1814488.5784257829654962 * log(model.X[5]) + 0.17046260658069070648146 * exp(model.X[2]) + 0.19264978580715924616484 * exp(model.X[3]) + 10604.321989657661106321 * exp(model.X[5]) - 126139.89324928056157660 * model.X[1]**-1 + 97.328664653018549302033 * model.X[2]**-1 - 1852.5660578030554006546 * model.X[3]**-1 - 82583.916631986488937400 * model.X[4]**-1 - 921208.54692297906149179 * model.X[5]**-1 + 0.24303737758074119706952e-1 * model.X[4]**2 + 0.14220662815632638485003e-2 * model.X[2]**6 - 18332.662571847322396934 * (model.X[1]*model.X[2])**-1 + 12971.359676330972433789 * (model.X[1]*model.X[3])**-1 - 190748.21701417074655183 * (model.X[1]*model.X[4])**-1 + 517741.70649925363250077 * (model.X[1]*model.X[5])**-1 + 6.4138836593677739372765 * (model.X[2]*model.X[3])**-1 + 161.84897294172918691402 * (model.X[2]*model.X[4])**-1 - 98.132776269948593039771 * (model.X[2]*model.X[5])**-1 - 127.81560196753949298909 * (model.X[3]*model.X[4])**-1 + 959.23789417775230958796 * (model.X[3]*model.X[5])**-1 + 40562.788680774232489057 * (model.X[4]*model.X[5])**-1 + 0.80943994695022462772943e-4 * (model.X[1]*model.X[2])**2 - 0.73377979803613628365810e-6 * (model.X[1]*model.X[4])**2 - 0.83360769667808587435331e-1 * (model.X[1]*model.X[5])**2 + 0.47281999954797841766770e-4 * (model.X[2]*model.X[4])**2 - 0.82969226530339712510909 * (model.X[2]*model.X[5])**2 - 0.20762811090683586448535e-2 * (model.X[3]*model.X[4])**2 - 0.25184216057359109369740e-1 * (model.X[4]*model.X[5])**2 - 0.69676242634066721419899e-7 * (model.X[1]*model.X[2])**3 + 0.14424596829106084276174e-3 * (model.X[1]*model.X[5])**3 + 0.61190113932150348998134e-5 * (model.X[3]*model.X[4])**3 - 0.16030859742170394829527e-8 * (model.X[3]*model.X[4])**4 - 0.32680987234653825768138e-1 * (model.X[3]*model.X[5])**4 - 42.262446664911657023822 * (model.X[1]*model.X[2]*model.X[3])**-1 - 3574.9457242981188755948 * (model.X[1]*model.X[2]*model.X[4])**-1 + 18617.093888649698783411 * (model.X[1]*model.X[2]*model.X[5])**-1 - 3810.7239035825091377774 * (model.X[1]*model.X[3]*model.X[4])**-1 - 13572.870873411660795682 * (model.X[1]*model.X[3]*model.X[5])**-1 + 177418.39199656463460997 * (model.X[1]*model.X[4]*model.X[5])**-1 - 1.3880554290822195717681 * (model.X[2]*model.X[3]*model.X[4])**-1 - 6.0742842532766214702633 * (model.X[2]*model.X[3]*model.X[5])**-1 - 141.19756624642431575012 * (model.X[2]*model.X[4]*model.X[5])**-1 + 146.69886318114419054837 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.14069303403154123272661e-8 * (model.X[1]*model.X[2]*model.X[4])**2 + 0.75713348104542397353054e-6 * (model.X[1]*model.X[4]*model.X[5])**2 + 0.20703702661710888383029e-2 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.58399580925329921051738e-5 * (model.X[3]*model.X[4]*model.X[5])**3 + 1301.3329347509911713132 * (model.X[1]/model.X[2])**-1 + 4.2799938633626588568859 * (model.X[1]/model.X[4])**-1 - 0.24298442392521545606099e-2 * (model.X[2]/model.X[4])**-1 - 0.28488558332079777501988e-1 * (model.X[3]/model.X[1])**-1 - 0.42623705792428157393403e-2 * (model.X[3]/model.X[4])**-1 + 900.66237570242617493932 * (model.X[3]/model.X[5])**-1 - 0.54442300716992619857848 * (model.X[4]/model.X[1])**-1 - 1.0108842166243889870714 * (model.X[4]/model.X[3])**-1 + 42194.604239804881217424 * (model.X[4]/model.X[5])**-1 + 0.21219124266971223224942 * (model.X[5]/model.X[3])**2

                def Y3_constraint(m):
                    return model.Y[3] == 0.32160206701706260147555e-2 * model.X[1] + 0.63405384024195621250897 * model.X[2] - 0.71367725194341202765713 * model.X[3] - 0.61909582803611196144544e-2 * model.X[4] + 6943999.0497337291017175 * model.X[5] - 1.1024909082883982414103 * log(model.X[1]) - 0.12590444758152810611485e-1 * log(model.X[2]) + 0.41733467989928368924168 * log(model.X[3]) + 0.93185365366984379553728e-1 * log(model.X[4]) - 9190070.7862259782850742 * log(model.X[5]) - 0.15327764430198881524803e-2 * exp(model.X[2]) - 0.18581807271019611799145e-1 * exp(model.X[3]) - 1728566.9406812945380807 * exp(model.X[5]) + 118733.95375142553530168 * model.X[1]**-1 + 172.11315932774095927016 * model.X[2]**-1 + 0.73350802720760596709049e-1 * model.X[3]**-1 + 1334.6353437277150533191 * model.X[4]**-1 - 3811776.6657164362259209 * model.X[5]**-1 + 8.4496330401954296007716 * model.X[2]**2 + 2.9954798061580238943691 * model.X[3]**2 + 0.35995367736081133880344e-1 * model.X[4]**2 + 1566515.6011380013078451 * model.X[5]**2 - 0.87448689629865614114657e-1 * model.X[3]**3 - 0.55434586532777492966407e-6 * model.X[4]**3 + 0.13788574768905633230465e-1 * model.X[3]**4 + 4.0429644885442908019968 * (model.X[1]*model.X[3])**-1 - 9039.4230963788995723007 * (model.X[1]*model.X[4])**-1 - 59208.888404803976300173 * (model.X[1]*model.X[5])**-1 + 0.14152242925476504666754e-2 * (model.X[2]*model.X[3])**-1 - 5.3856844006015496262307 * (model.X[2]*model.X[4])**-1 - 85.859583524143090471625 * (model.X[2]*model.X[5])**-1 + 0.41062867637007227639145 * (model.X[3]*model.X[4])**-1 - 687.67511152070539992565 * (model.X[4]*model.X[5])**-1 + 0.11373652867972136606641e-4 * (model.X[1]*model.X[2])**2 + 0.20963818813231881503999e-5 * (model.X[1]*model.X[3])**2 + 0.17734963310199912594643e-9 * (model.X[1]*model.X[4])**2 + 0.54434537789309767668255e-5 * (model.X[2]*model.X[4])**2 - 4.1582617938463215523370 * (model.X[2]*model.X[5])**2 + 0.18507014114625130476142e-3 * (model.X[3]*model.X[4])**2 - 1.2966053938772588161044 * (model.X[3]*model.X[5])**2 - 0.18187696401876601165482e-1 * (model.X[4]*model.X[5])**2 - 0.13414158639816584896539e-5 * (model.X[3]*model.X[4])**3 + 0.32198619361322250952167e-8 * (model.X[3]*model.X[4])**4 - 0.28587856199573379338205e-3 * (model.X[3]*model.X[5])**5 - 76.502336797515752664367 * (model.X[1]*model.X[3]*model.X[4])**-1 + 9015.2516004666940716561 * (model.X[1]*model.X[4]*model.X[5])**-1 - 0.39620303993649096108154e-1 * (model.X[2]*model.X[3]*model.X[4])**-1 + 5.3601464922856374428761 * (model.X[2]*model.X[4]*model.X[5])**-1 - 0.11405112413205107654368e-4 * (model.X[1]*model.X[2]*model.X[5])**2 - 0.21209396463874099189367e-5 * (model.X[1]*model.X[3]*model.X[5])**2 - 0.53241854099628059407770e-5 * (model.X[2]*model.X[4]*model.X[5])**2 - 0.18858575062276485652044e-3 * (model.X[3]*model.X[4]*model.X[5])**2 + 0.13933714482247979391682e-5 * (model.X[3]*model.X[4]*model.X[5])**3 - 0.34309731851486454048287e-8 * (model.X[3]*model.X[4]*model.X[5])**4 - 59618.849116693440009840 * (model.X[1]/model.X[5])**-1 - 0.50515251781083525713101e-3 * (model.X[2]/model.X[3])**-1 - 0.69208993380729405694128e-4 * (model.X[2]/model.X[4])**-1 - 86.255521122691874325028 * (model.X[2]/model.X[5])**-1 - 0.12756275973109943832479e-3 * (model.X[3]/model.X[4])**-1 - 646.35356147302161389234 * (model.X[4]/model.X[5])**-1 - 0.62384742965454675900361 * (model.X[5]/model.X[2])**-1 - 4.2899513235553632384267 * (model.X[2]/model.X[5])**2 - 1.3736949179197979198364 * (model.X[3]/model.X[5])**2 - 0.17727450727483055198386e-1 * (model.X[4]/model.X[5])**2

                def Y4_constraint(m):
                    return model.Y[4] == - 0.25310648322143646654636e-2 * model.X[1] - 26.748724393577091973384 * model.X[3] - 0.24007015618519719421520e-2 * model.X[4] - 4342645.3162344563752413 * model.X[5] + 0.49470988937588250555777 * log(model.X[1]) + 0.75625018187226916710486e-1 * log(model.X[2]) + 3.7168263217548300758608 * log(model.X[3]) - 1.3657967673689390686320 * log(model.X[4]) + 931892.59296964528039098 * log(model.X[5]) + 15.783421154665292718278 * exp(model.X[3]) + 1711843.0976067984011024 * exp(model.X[5]) - 0.19753411266387777001086 * model.X[3]**-1 - 20.110885043970657903856 * model.X[4]**-1 - 6.3458627252499084647752 * model.X[3]**3 - 310634.42451820807764307 * model.X[5]**4 - 0.82628195774544679896856e-1 * model.X[3]**6 + 3.0666881434565285147187 * (model.X[1]*model.X[2])**-1 - 85.467434741996626712535 * (model.X[1]*model.X[3])**-1 - 0.32021043144816463410507 * (model.X[3]*model.X[4])**-1 - 0.23891475807428310820093e-8 * (model.X[1]*model.X[4])**2 - 0.57144245557547327255617e-5 * (model.X[2]*model.X[4])**2 + 0.46279465185844389238726e-3 * (model.X[3]*model.X[4])**2 - 0.18566327427359770384056e-3 * (model.X[4]*model.X[5])**2 + 0.69767058030907286132488e-9 * (model.X[1]*model.X[3])**3 + 0.62289887118532015746614e-3 * (model.X[2]*model.X[3])**3 - 0.50870168549614341727601e-5 * (model.X[3]*model.X[4])**3 + 0.17435120783545649546514e-7 * (model.X[3]*model.X[4])**4 + 1503.4681716550217061013 * (model.X[1]*model.X[3]*model.X[4])**-1 + 0.57507279766323982084231 * (model.X[2]*model.X[3]*model.X[4])**-1 - 0.15901364945242882588318e-6 * (model.X[1]*model.X[2]*model.X[3])**2 + 0.60590345279601907912959e-1 * (model.X[3]/model.X[4])**-1 + 3.0063056324905459426589 * (model.X[4]/model.X[3])**-1 - 0.36775405260660383628679e-3 * (model.X[4]/model.X[3])**2 + 0.12712863876188952837334e-5 * (model.X[4]/model.X[3])**3

            elif cID == 2:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == 186.36777781608489590326 * model.X[1] + 190.80752672390875090969 * model.X[2] + 215.27059904076574525789 * model.X[3] - 467037115.05965352058411 * model.X[4] - 141.93200587620407304712 * model.X[5] - 173.98941508589584259425 * log(model.X[1]) - 127.82806433011354840801 * log(model.X[2]) - 3664.5546524005562787352 * log(model.X[3]) + 947238885.39430379867554 * log(model.X[4]) - 965.48584540227341221907 * log(model.X[5]) - 11.151992281081025026879 * exp(model.X[1]) - 47.998779101926075441042 * exp(model.X[2]) - 2424565.9210632103495300 * exp(model.X[4]) + 5180.3448071449020062573 * exp(model.X[5]) - 20420.355476179938705172 * model.X[3]**-1 + 473628673.74945038557053 * model.X[4]**-1 - 2.5417860210582241542454 * model.X[3]**2 + 0.14213651690821013998112e-1 * model.X[3]**3 + 7.6315870606098545891882 * model.X[2]**4 - 146.78988153291498974795 * (model.X[1]*model.X[3])**-1 + 22299.209062191683187848 * (model.X[2]*model.X[3])**-1 - 12115.885269488408084726 * (model.X[3]*model.X[5])**-1 - 2.1204767353652074213244 * (model.X[1]*model.X[2])**2 - 0.48957601715031717759530e-1 * (model.X[1]*model.X[3])**2 - 2.6834580593896855127412 * (model.X[2]*model.X[3])**2 - 6457.9225268318414237001 * (model.X[4]*model.X[5])**2 + 0.74623042729081076867431e-3 * (model.X[1]*model.X[3])**3 + 0.29687502295505641819462e-1 * (model.X[2]*model.X[3])**3 - 0.94386485722512856945572e-4 * (model.X[2]*model.X[3])**4 + 0.54927328781185528680520e-2 * (model.X[1]*model.X[2])**5 - 23171.500135303518618457 * (model.X[2]*model.X[3]*model.X[4])**-1 + 12326.153297994249442127 * (model.X[3]*model.X[4]*model.X[5])**-1 + 2.7803118645600171099375 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.31179842173756928264128e-1 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.40852630983490735566829e-5 * (model.X[1]*model.X[3]*model.X[4])**4 + 0.10043287704558356832323e-3 * (model.X[2]*model.X[3]*model.X[4])**4 - 8.1900265344825395885664 * (model.X[1]/model.X[2])**-1 - 1.6898237484835632038482 * (model.X[1]/model.X[3])**-1 - 546.62499358962236328807 * (model.X[3]/model.X[2])**-1

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == 3.6467774887399064809301 * model.X[1] + 3.8675260210399984295293 * model.X[2] + 4.2810741530749298888736 * model.X[3] - 13805125.907637236639857 * model.X[4] - 309.08768261709212765709 * model.X[5] - 4.1791308217285756398951 * log(model.X[1]) - 3.1964767453019562459815 * log(model.X[2]) - 72.786468045922617875476 * log(model.X[3]) + 27996303.142200451344252 * log(model.X[4]) - 0.63069659028465374639438 * exp(model.X[2]) - 71088.332729503963491879 * exp(model.X[4]) + 1285.3777576204242905078 * model.X[3]**-1 + 13998529.140792695805430 * model.X[4]**-1 - 0.16938793291277398633810 * model.X[3]**2 - 0.12113150185608809183968 * model.X[1]**3 + 0.17485235203694496613352e-2 * model.X[3]**3 - 18.217735123935668184458 * (model.X[1]*model.X[3])**-1 + 195.71756782989578482557 * (model.X[2]*model.X[3])**-1 - 1655.8529787786083034007 * (model.X[3]*model.X[4])**-1 + 0.29634425934470109975649 * (model.X[1]*model.X[2])**2 - 0.63814758171062094249670e-1 * (model.X[2]*model.X[3])**2 + 0.11914101226349874118604 * (model.X[3]*model.X[4])**2 + 0.16103491587566614445803e-1 * (model.X[1]*model.X[2])**3 - 0.99701416016254356593316e-6 * (model.X[1]*model.X[3])**3 + 0.73149416070407923505525e-3 * (model.X[2]*model.X[3])**3 - 0.14799033898822142648471e-2 * (model.X[3]*model.X[4])**3 - 0.23764027237976314997560e-5 * (model.X[2]*model.X[3])**4 + 0.99530212257977299095124e-1 * (model.X[2]*model.X[4])**4 - 0.41904564955073780874173 * (model.X[2]*model.X[5])**5 + 4.1653870190039672394278 * (model.X[1]*model.X[3]*model.X[5])**-1 - 218.20239917810394558728 * (model.X[2]*model.X[3]*model.X[4])**-1 - 0.43222588595055005944445 * (model.X[1]*model.X[2]*model.X[4])**2 + 0.65937569390248071399263e-1 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.76537125496127565802557e-3 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.25160849592400077427842e-5 * (model.X[2]*model.X[3]*model.X[4])**4 - 0.10316176711564243543423e-2 * (model.X[1]*model.X[2]*model.X[5])**5 + 0.45028113157202637184540 * (model.X[2]*model.X[4]*model.X[5])**5 - 0.25575263096386156858042e-1 * (model.X[1]/model.X[3])**-1 - 0.35679188879214345127278e-2 * (model.X[2]/model.X[3])**-1 - 13.002055678486602374733 * (model.X[3]/model.X[2])**-1 + 308.46390977708585978689 * (model.X[4]/model.X[5])**-1 - 0.97797876181423992747455e-1 * (model.X[2]/model.X[1])**2 + 0.10423130592483391410052e-1 * (model.X[2]/model.X[1])**3

                def Y2_constraint(m):
                    return model.Y[2] == 25.661839918619911316000 * model.X[1] + 0.63959277813859927164231 * model.X[2] - 16.252217358397793134372 * model.X[3] + 20325825.885015539824963 * model.X[4] - 3.2060375071326006057859 * model.X[5] - 14.252981752320126318523 * log(model.X[1]) + 7.6523701487245805452631 * log(model.X[2]) + 280.89179938935814107026 * log(model.X[3]) - 41105049.359306856989861 * log(model.X[4]) + 83467.485399154480546713 * exp(model.X[4]) + 152.32032063932007304174 * model.X[2]**-1 + 5477.5098801919430115959 * model.X[3]**-1 - 20553400.800729215145111 * model.X[4]**-1 + 144.11985692714807782977 * model.X[1]**2 + 0.90987701381387375842991 * model.X[3]**2 - 0.85139929103720032171898e-2 * model.X[3]**3 - 1.1317723661522369749122 * model.X[1]**6 + 32.024214285724255546484 * (model.X[1]*model.X[2])**-1 - 4291.2049926054141906206 * (model.X[1]*model.X[3])**-1 - 1654.6630453011778172367 * (model.X[2]*model.X[3])**-1 - 146.17147288047073061534 * (model.X[2]*model.X[4])**-1 - 3842.1735693629057095677 * (model.X[3]*model.X[4])**-1 + 10.998393771543767627463 * (model.X[1]*model.X[2])**2 - 0.54173314613830549080209e-1 * (model.X[1]*model.X[3])**2 - 151.86135298451389985530 * (model.X[1]*model.X[4])**2 - 0.45920913746430813695554e-1 * (model.X[2]*model.X[3])**2 + 98.964809776057094836688 * (model.X[2]*model.X[5])**2 - 0.71055214366722840857449 * (model.X[3]*model.X[4])**2 - 2.6022665628026886430746 * (model.X[1]*model.X[2])**3 + 0.78859225640296931928407e-4 * (model.X[2]*model.X[3])**3 + 0.74324399653343132393646e-2 * (model.X[3]*model.X[4])**3 + 0.18408252396704669062721e-1 * (model.X[1]*model.X[2])**4 - 0.32109573513736933871444e-6 * (model.X[2]*model.X[3])**4 + 0.97986231748976860297793e-9 * (model.X[1]*model.X[3])**5 + 1.2204989567503436997953 * (model.X[1]*model.X[4])**6 - 14.775070011329518138155 * (model.X[1]*model.X[2]*model.X[3])**-1 - 31.218056442972891062482 * (model.X[1]*model.X[2]*model.X[4])**-1 + 4311.4070669926613845746 * (model.X[1]*model.X[3]*model.X[4])**-1 - 15.181717508627055934767 * (model.X[1]*model.X[3]*model.X[5])**-1 + 1691.5544704713222472492 * (model.X[2]*model.X[3]*model.X[4])**-1 - 0.99765620886091443443588e-3 * (model.X[1]*model.X[2]*model.X[3])**2 - 10.327987945579529593942 * (model.X[1]*model.X[2]*model.X[4])**2 + 0.54049733993484429250831e-1 * (model.X[1]*model.X[3]*model.X[4])**2 + 0.40874012668954858018555e-1 * (model.X[2]*model.X[3]*model.X[4])**2 - 101.01406090967890349930 * (model.X[2]*model.X[4]*model.X[5])**2 + 0.10905841773036667699428e-4 * (model.X[1]*model.X[2]*model.X[3])**3 + 2.4145929677829967019420 * (model.X[1]*model.X[2]*model.X[4])**3 - 0.28193601961025833376382e-7 * (model.X[1]*model.X[2]*model.X[3])**4 + 0.94807623260779695333294e-9 * (model.X[2]*model.X[3]*model.X[5])**5 + 0.13937302208402127957215e-2 * (model.X[1]*model.X[2]*model.X[5])**6 - 0.99900793379964603069254e-1 * (model.X[1]/model.X[3])**-1 - 0.12883988162446630143521 * (model.X[2]/model.X[3])**-1

                def Y3_constraint(m):
                    return model.Y[3] == 4.6397116811320762153059 * model.X[1] + 9.7173416070844709224730 * model.X[2] + 0.14283029003209912755068 * model.X[3] + 360192.75921483233105391 * model.X[4] + 0.65767328035457073287517 * model.X[5] - 3.3736362335697376302335 * log(model.X[1]) + 0.39289243099433607264714 * log(model.X[2]) - 5.4275231594461015305342 * log(model.X[3]) - 720390.62061929714400321 * log(model.X[4]) + 0.44661147696910596938125 * exp(model.X[1]) + 9.1767574013230888141379 * model.X[1]**-1 + 0.62106518891332385123860 * model.X[2]**-1 - 132357.05394180479925126 * model.X[3]**-1 - 360179.86704331234795973 * model.X[4]**-1 - 0.88958323564771683070605e-9 * model.X[3]**5 - 6.3951630116300322015377 * (model.X[1]*model.X[2])**-1 - 161.26476426637685790411 * (model.X[1]*model.X[3])**-1 - 9.8183427584414477706787 * (model.X[1]*model.X[4])**-1 + 252.11877643047603214654 * (model.X[2]*model.X[3])**-1 + 0.56054247119696393175658e-1 * (model.X[2]*model.X[5])**-1 + 65638.062246283981949091 * (model.X[3]*model.X[4])**-1 - 241.09258695399688576799 * (model.X[3]*model.X[5])**-1 - 0.13984012196031538749486e-1 * (model.X[1]*model.X[2])**2 + 0.53311031647244801635194e-3 * (model.X[1]*model.X[3])**2 - 1.5694946112211227706723 * (model.X[1]*model.X[4])**2 + 0.37284945076321998960744e-2 * (model.X[2]*model.X[3])**2 - 0.21846666981566949944371e-1 * (model.X[2]*model.X[5])**2 - 0.18557322898749679072894e-3 * (model.X[3]*model.X[5])**2 + 0.21562635056285132939546e-3 * (model.X[1]*model.X[2])**3 - 0.70824721206596718384749e-5 * (model.X[2]*model.X[3])**3 + 0.57326543969924538100222e-8 * (model.X[1]*model.X[3])**4 - 0.24273101771859601164166e-7 * (model.X[2]*model.X[3])**4 + 1.3157468667402736350880 * (model.X[1]*model.X[2]*model.X[3])**-1 + 6.3020203525440363634402 * (model.X[1]*model.X[2]*model.X[4])**-1 + 159.75036052636338013144 * (model.X[1]*model.X[3]*model.X[4])**-1 - 252.36846847594577525342 * (model.X[2]*model.X[3]*model.X[4])**-1 + 240.95426002215103267190 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.23450595517504035564574e-5 * (model.X[1]*model.X[2]*model.X[3])**2 + 0.78463188442366993413657e-2 * (model.X[1]*model.X[2]*model.X[4])**2 - 0.59331901853729466719822e-3 * (model.X[1]*model.X[3]*model.X[4])**2 - 0.42035533515941926260839e-2 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.22337447888373836157871e-3 * (model.X[2]*model.X[3]*model.X[5])**2 + 0.13750565684014131194506e-6 * (model.X[1]*model.X[2]*model.X[3])**3 + 0.13381953260196813415670e-4 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.22070048131572611876830e-5 * (model.X[2]*model.X[3]*model.X[5])**3 - 0.50999163804174841632971e-9 * (model.X[1]*model.X[2]*model.X[3])**4 - 0.24374051407814210229441e-1 * (model.X[2]/model.X[3])**-1 + 66646.746090217071468942 * (model.X[3]/model.X[4])**-1 - 9.5227052683853035119910 * (model.X[4]/model.X[2])**-1 + 0.73641912734850938039230e-4 * (model.X[3]/model.X[2])**2 + 12506.070284291665302590 * (model.X[4]/model.X[3])**4

                def Y4_constraint(m):
                    return model.Y[4] == 0.28421166724600138708823 * model.X[1] + 0.40859358633759523815598 * model.X[2] + 0.51365678779131229703125 * model.X[3] - 1149711.4932794454507530 * model.X[4] + 0.40153629300366794341315 * model.X[5] - 0.28830798826101577958525 * log(model.X[1]) - 0.27640082511423819111585 * log(model.X[2]) - 8.7354286368299796095016 * log(model.X[3]) + 2331804.0977056873962283 * log(model.X[4]) - 2.4900291417844022667794 * log(model.X[5]) - 0.11741832484870717845382 * exp(model.X[2]) - 5963.7401032277430203976 * exp(model.X[4]) + 12.370858595132945723094 * exp(model.X[5]) - 48.977607906013219007946 * model.X[3]**-1 + 1165924.4631440981756896 * model.X[4]**-1 - 0.60720690440514138094819e-2 * model.X[3]**2 - 0.79993879158241406462926e-2 * model.X[1]**3 + 0.33994154009042918383222e-4 * model.X[3]**3 + 0.18791252257809063636040e-1 * model.X[2]**4 - 0.28164893880253488722687 * (model.X[1]*model.X[3])**-1 + 48.573843115827955330133 * (model.X[2]*model.X[3])**-1 - 28.544781008839350988637 * (model.X[3]*model.X[5])**-1 - 0.10975947414678750759659e-2 * (model.X[1]*model.X[2])**2 - 0.11986215105739753258515e-3 * (model.X[1]*model.X[3])**2 - 0.62365046350958243739915e-2 * (model.X[2]*model.X[3])**2 - 15.795930992967527117798 * (model.X[4]*model.X[5])**2 + 0.18762545212802419335597e-5 * (model.X[1]*model.X[3])**3 + 0.69429431289730710779098e-4 * (model.X[2]*model.X[3])**3 - 0.22204411113965310655828e-6 * (model.X[2]*model.X[3])**4 - 50.517016436038538529374 * (model.X[2]*model.X[3]*model.X[4])**-1 + 29.057560262125186056892 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.64596976712731797587441e-2 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.72881469975898444568947e-4 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.10448515581402651382448e-7 * (model.X[1]*model.X[3]*model.X[4])**4 + 0.23606458643125390480589e-6 * (model.X[2]*model.X[3]*model.X[4])**4 - 0.39457779609758537181508e-2 * (model.X[1]/model.X[3])**-1 - 1.2520429195058171423227 * (model.X[3]/model.X[2])**-1

            elif cID == 5:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == 9.3152556369399697189237 * model.X[1] - 9.2091087538106943810590 * model.X[2] + 119.07213302267095400566 * model.X[3] - 4.0244814600790386194262 * model.X[4] + 2222.1850126027193255140 * model.X[5] - 800.12966134125690587098 * log(model.X[1]) - 118.33088875307326759412 * log(model.X[3]) + 211.11011253110186203230 * log(model.X[4]) - 3.4476808257457611794905 * exp(model.X[3]) + 70.515773507937026920445 * model.X[2]**-1 - 184.51427138479314749020 * model.X[3]**-1 - 15061.027823764545246377 * (model.X[1]*model.X[2])**-1 + 2009.3789833891135003796 * (model.X[3]*model.X[4])**-1 + 0.29402364736214506302225e-1 * (model.X[3]*model.X[4])**2 - 0.51501226252961075690109e-4 * (model.X[1]*model.X[5])**3 + 0.17857809326115637628407e-3 * (model.X[3]*model.X[4])**3 - 0.63066904213910340848415e-1 * (model.X[3]*model.X[4]*model.X[5])**2 + 1.5828778016173714604520 * (model.X[3]/model.X[4])**-1

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] ==  - 0.13624118437704957340628 * model.X[1] - 0.16602507672345465095098 * model.X[2] + 2.2724163225926337084104 * model.X[3] + 22.232338440296608439439 * model.X[4] + 392.28014566323776080026 * model.X[5] + 24.825689347566196829575 * log(model.X[1]) - 0.51706918386352529459771 * log(model.X[3]) - 249.43359894489483963298 * log(model.X[4]) - 353.85842895881813774395 * log(model.X[5]) + 1.8456242812066159242335 * model.X[2]**-1 - 1060.1342584234705554991 * model.X[4]**-1 - 0.46125851294206432484657 * model.X[4]**2 + 0.60199695325160148054455e-2 * model.X[4]**3 - 0.33549788206989423415376e-4 * model.X[4]**4 - 0.64755660175396087454430e-3 * model.X[3]**6 - 372.38257447322303050896 * (model.X[1]*model.X[2])**-1 + 20.060253974293200229795 * (model.X[3]*model.X[4])**-1 + 0.93142008888168117269890e-3 * (model.X[3]*model.X[4])**2 + 0.47220331528318869830836e-5 * (model.X[3]*model.X[4])**3 - 0.18662791375422447225085e-2 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.51892476046288549262897e-2 * (model.X[3]/model.X[1])**-1 - 9.8829014566319628443125 * (model.X[4]/model.X[3])**-1 - 0.46233584159233988232409e-4 * (model.X[3]/model.X[2])**5

                def Y2_constraint(m):
                    return model.Y[2] ==  - 185.06542815159031079020 * model.X[1] - 70.482364964627038261824 * model.X[2] - 5.9739841269548854540972 * model.X[3] + 0.50412627307444363156108e-1 * model.X[4] + 128872226.62181702256203 * model.X[5] + 22802.900672876770840958 * log(model.X[1]) + 6.0342224695400599188133 * log(model.X[2]) + 0.23038761550394065008573e-1 * log(model.X[3]) - 0.31071338266905162983633 * log(model.X[4]) - 169592641.05698338150978 * log(model.X[5]) + 1.8028519813172005914481 * exp(model.X[2]) + 0.86063313350531241846531e-2 * exp(model.X[3]) - 32499585.753719855099916 * exp(model.X[5]) + 1359011.9913054790813476 * model.X[1]**-1 - 2735.6380638743285089731 * model.X[2]**-1 + 1463.5536370735985656211 * model.X[3]**-1 + 70477.450895698799286038 * model.X[4]**-1 - 70108390.310028433799744 * model.X[5]**-1 + 0.37538867405824538625581 * model.X[1]**2 + 1.0045711093387543755284 * model.X[2]**2 + 0.83341170413267577068636e-4 * model.X[4]**2 + 29479196.704433493316174 * model.X[5]**2 - 1.6131405787768202664267 * model.X[3]**4 - 36328.550902045404654928 * (model.X[1]*model.X[2])**-1 + 21312.019564507045288337 * (model.X[1]*model.X[3])**-1 + 392399.18890388775616884 * (model.X[1]*model.X[4])**-1 + 3.4711785723665640190916 * (model.X[2]*model.X[3])**-1 + 232.15031017259906320760 * (model.X[2]*model.X[4])**-1 + 1288.0480436196241953439 * (model.X[2]*model.X[5])**-1 - 76.873909762150745450526 * (model.X[3]*model.X[4])**-1 - 667.36897867404468343011 * (model.X[3]*model.X[5])**-1 - 33966.008164276448951568 * (model.X[4]*model.X[5])**-1 - 0.43068236555093402642344e-3 * (model.X[1]*model.X[2])**2 - 0.42602037642366370751024e-1 * (model.X[1]*model.X[5])**2 - 0.58271318444891228791049e-2 * (model.X[3]*model.X[4])**2 + 0.17430374338423535154521e-7 * (model.X[1]*model.X[2])**3 - 0.11741633981154732456302e-3 * (model.X[1]*model.X[5])**3 + 0.44210756946687328877970e-4 * (model.X[3]*model.X[4])**3 + 0.14473015957564599562492e-9 * (model.X[2]*model.X[4])**4 - 0.27600753923898052599739 * (model.X[2]*model.X[5])**4 - 0.10564688939790315087901e-6 * (model.X[3]*model.X[4])**4 + 0.82857981757758514262946 * (model.X[3]*model.X[5])**4 - 0.35806512484632463939844e-6 * (model.X[2]*model.X[3])**6 + 0.62234433434546065910808 * (model.X[1]*model.X[2]*model.X[3])**-1 + 34233.780055792711209506 * (model.X[1]*model.X[2]*model.X[5])**-1 - 1011.1744220481588172333 * (model.X[1]*model.X[3]*model.X[4])**-1 - 21454.258081940111878794 * (model.X[1]*model.X[3]*model.X[5])**-1 - 389764.16766463970998302 * (model.X[1]*model.X[4]*model.X[5])**-1 - 3.4502374818532497435797 * (model.X[2]*model.X[3]*model.X[5])**-1 - 230.32547359223647731596 * (model.X[2]*model.X[4]*model.X[5])**-1 + 81.662824238827425915588 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.39751941853728386434830e-3 * (model.X[1]*model.X[2]*model.X[5])**2 - 0.52225439529271010799263e-8 * (model.X[1]*model.X[4]*model.X[5])**2 + 0.59399181387233320611463e-2 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.45511548247487791630204e-4 * (model.X[3]*model.X[4]*model.X[5])**3 + 0.10988235302915307497698e-6 * (model.X[3]*model.X[4]*model.X[5])**4 - 1223.7677015125459547562 * (model.X[1]/model.X[2])**-1 - 6.8456318248207850274412 * (model.X[1]/model.X[4])**-1 - 305369.80533808533800766 * (model.X[1]/model.X[5])**-1 - 0.43736974343179198243536e-1 * (model.X[2]/model.X[1])**-1 - 0.99080374268231824474995e-2 * (model.X[2]/model.X[3])**-1 + 1469.7527991477788873453 * (model.X[2]/model.X[5])**-1 - 0.11050825655524907156768e-1 * (model.X[3]/model.X[1])**-1 - 793.38586079987226185040 * (model.X[3]/model.X[5])**-1 - 36529.054858798117493279 * (model.X[4]/model.X[5])**-1 + 69.529388874995404989932 * (model.X[5]/model.X[2])**-1 + 5.8901386810328242304990 * (model.X[5]/model.X[3])**-1 - 0.69705028460934480185988e-5 * (model.X[1]/model.X[2])**2 - 0.18040005182551089061779e-3 * (model.X[1]/model.X[5])**3 + 0.78401544511624676747630 * (model.X[3]/model.X[5])**4

                def Y3_constraint(m):
                    return model.Y[3] == 0.47055528379758043699965e-1 * model.X[1] - 1.6170502095227181627024 * model.X[2] + 0.17741466587235150270674e-1 * model.X[3] + 0.69445991852243047284809e-2 * model.X[4] + 6.6218930787538656801416 * model.X[5] - 2.0802452865373362023149 * log(model.X[1]) + 0.18172651720940256880876e-1 * log(model.X[2]) - 0.70929771427011376744298e-2 * log(model.X[3]) - 0.13311786959203134039775 * log(model.X[4]) - 0.89068865699848709382991 * log(model.X[5]) - 0.66164574536551525735240e-2 * exp(model.X[3]) + 0.33316492298236244362641 * model.X[2]**-1 - 0.51451012379106864091938 * model.X[4]**-1 - 0.81677388030817341048502e-4 * model.X[4]**2 + 0.40064218745368070509616e-6 * model.X[4]**3 + 0.12079602312599310200147e-2 * model.X[3]**4 - 53.737577893426021091727 * (model.X[1]*model.X[2])**-1 + 31.574164248343151939480 * (model.X[1]*model.X[4])**-1 - 0.15486240890102897713176e-1 * (model.X[2]*model.X[3])**-1 + 2.8512023644191217819355 * (model.X[2]*model.X[4])**-1 - 0.29641577734148638612055 * (model.X[2]*model.X[5])**-1 + 0.54376277858388388786182 * (model.X[3]*model.X[4])**-1 - 0.57184190675874901899078 * (model.X[4]*model.X[5])**-1 - 0.57101716362145271907729e-5 * (model.X[1]*model.X[2])**2 + 0.12081287596880238501169e-6 * (model.X[1]*model.X[3])**2 + 0.12817780166834134017692e-9 * (model.X[1]*model.X[4])**2 - 0.16629997388548352983857e-3 * (model.X[1]*model.X[5])**2 + 0.24722573511811801453322e-6 * (model.X[2]*model.X[4])**2 + 0.67578649153051478738665e-5 * (model.X[3]*model.X[4])**2 - 0.41994629793790840682766e-2 * (model.X[3]*model.X[5])**2 - 0.10172666390347444016281e-9 * (model.X[1]*model.X[3])**3 + 0.24685152767733465809015e-6 * (model.X[1]*model.X[5])**3 - 0.76128176486215541496671e-7 * (model.X[3]*model.X[4])**3 + 0.24752465795049885212556e-9 * (model.X[3]*model.X[4])**4 + 3.2899350347614202405566 * (model.X[1]*model.X[2]*model.X[3])**-1 + 69.132680642942219151337 * (model.X[1]*model.X[2]*model.X[4])**-1 + 47.139691153221690456121 * (model.X[1]*model.X[2]*model.X[5])**-1 - 107.11888138140297144218 * (model.X[1]*model.X[3]*model.X[4])**-1 - 0.34729303820162503446678e-1 * (model.X[2]*model.X[3]*model.X[4])**-1 - 3.1091509308452893733943 * (model.X[2]*model.X[4]*model.X[5])**-1 + 0.58480257933693195222932e-5 * (model.X[1]*model.X[2]*model.X[5])**2 + 0.47628175389919452653587e-1 * (model.X[4]/model.X[2])**-1 + 1.5914372150161315566663 * (model.X[5]/model.X[2])**-1

                def Y4_constraint(m):
                    return model.Y[4] == 0.16298657194888429428081e-1 * model.X[1] - 0.24088536328423979654412e-1 * model.X[2] + 0.30401455175037161993146 * model.X[3] - 0.10717424656798169371741e-1 * model.X[4] - 2.8745075535011523903961 * model.X[5] - 0.29809868747521583998150 * log(model.X[3]) + 0.55685872422194715447574 * log(model.X[4]) + 9.1000912587614681825698 * log(model.X[5]) - 0.86839028451935734026490e-2 * exp(model.X[3]) + 0.18964641636756116027662 * model.X[2]**-1 - 0.48318262547993329203422 * model.X[3]**-1 - 40.435785128659183840227 * (model.X[1]*model.X[2])**-1 + 5.3046672106687617898046 * (model.X[3]*model.X[4])**-1 - 0.46971422809814477878753e-4 * (model.X[1]*model.X[5])**2 + 0.68974056192081756810029e-4 * (model.X[3]*model.X[4])**2 + 0.46725468341221525318151e-6 * (model.X[3]*model.X[4])**3 - 0.15696090168774892281006e-3 * (model.X[3]*model.X[4]*model.X[5])**2 + 0.42391559523858816233011e-2 * (model.X[3]/model.X[4])**-1

            elif cID == 6:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == - 3.3571373945770690561119 * model.X[1] + 4.8165037603914093722324 * model.X[3] - 0.53736852474057483775027 * model.X[4] + 529480684367.98193359375 * model.X[5] + 629.79404591799811896635 * log(model.X[1]) + 41.311063192649378095211 * log(model.X[3]) + 63.411780089113001679380 * log(model.X[4]) - 109680905045.38392639160 * log(model.X[5]) - 206645054991.45513916016 * exp(model.X[5]) + 51513145329.974617004395 * model.X[5]**5 - 19274334625.096233367920 * model.X[5]**6 - 10425.767046350702003110 * (model.X[3]*model.X[4])**-1 - 2.4646171746457272710984 * (model.X[3]*model.X[4])**2 + 0.32122329958284116802059e-1 * (model.X[3]*model.X[4])**3 - 0.11356076525397286436890e-3 * (model.X[3]*model.X[4])**4 + 10928.849604608514709980 * (model.X[3]*model.X[4]*model.X[5])**-1 + 2.4765664569525984717302 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.32552467106352893366772e-1 * (model.X[3]*model.X[4]*model.X[5])**3 + 0.11593312922156606757478e-3 * (model.X[3]*model.X[4]*model.X[5])**4

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == 1.1702087154669751356550 * model.X[1] + 90.037372968300644515693 * model.X[3] + 0.14941507893836495843298e-1 * model.X[4] + 9258958.2621748484671116 * model.X[5] + 1.1464544290843026175253 * log(model.X[3]) - 18779506.858209017664194 * log(model.X[5]) + 48153.488783896616951097 * exp(model.X[5]) - 757839.44351188070140779 * model.X[4]**-1 - 9389853.7744125891476870 * model.X[5]**-1 + 971.53596914661420669290 * (model.X[3]*model.X[4])**-1 + 377732.44732144300360233 * (model.X[4]*model.X[5])**-1 - 0.36037448573111460770058e-1 * (model.X[3]*model.X[4])**2 + 0.64221508661894044413948e-3 * (model.X[3]*model.X[4])**3 - 0.24909968485253602800216e-5 * (model.X[3]*model.X[4])**4 - 949.89623481296609952551 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.36007187626576425687475e-1 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.64993728154883324658886e-3 * (model.X[3]*model.X[4]*model.X[5])**3 + 0.25418904717854490136694e-5 * (model.X[3]*model.X[4]*model.X[5])**4 + 1.2650016375573642779528 * (model.X[4]/model.X[3])**-1 + 380082.24193256453145295 * (model.X[4]/model.X[5])**-1 - 1.1610040866185260544086 * (model.X[5]/model.X[1])**-1 - 89.421729419381236425579 * (model.X[5]/model.X[3])**-1

                def Y2_constraint(m):
                    return model.Y[2] == - 357.50306463231834186445 * model.X[1] - 308.54971374138807505005 * model.X[2] - 843.09581353913290513447 * model.X[3] + 2.0795608457171050886814 * model.X[4] - 30418365.164125476032495 * model.X[5] + 96540.810250226335483603 * log(model.X[1]) + 149.51804110918314449918 * log(model.X[2]) + 89.588838354285627474383 * log(model.X[3]) - 101.25484920543858891051 * log(model.X[4]) + 60360374.653580568730831 * log(model.X[5]) + 34.067392896768119214812 * exp(model.X[2]) + 6576656.0348267555236816 * model.X[1]**-1 + 87985.252481468211044557 * model.X[3]**-1 - 1042315.4182760305702686 * model.X[4]**-1 + 29941667.103654768317938 * model.X[5]**-1 - 120.08305326599831630574 * model.X[2]**2 - 65.881123577516163436485 * model.X[3]**2 - 24.132591108105334143374 * model.X[4]**2 + 31.107926609595352829274 * model.X[2]**3 + 0.15289863334578769681564e-5 * model.X[1]**4 + 6046.4965015818443134776 * (model.X[1]*model.X[2])**-1 + 888292.85038371291011572 * (model.X[1]*model.X[3])**-1 + 6698708.3781836032867432 * (model.X[1]*model.X[4])**-1 + 366792.81486072932602838 * (model.X[1]*model.X[5])**-1 + 372.44112024245134762168 * (model.X[2]*model.X[3])**-1 + 971.11334657634699851769 * (model.X[2]*model.X[4])**-1 - 4049.1289911048743306310 * (model.X[3]*model.X[4])**-1 - 41161.425835109810577706 * (model.X[3]*model.X[5])**-1 + 529439.04337179614230990 * (model.X[4]*model.X[5])**-1 + 0.14420688028560495631131e-3 * (model.X[1]*model.X[3])**2 - 0.27606711775527612945337e-4 * (model.X[1]*model.X[4])**2 - 2.1715954321654677983133 * (model.X[2]*model.X[3])**2 - 0.40848732319279559832559e-1 * (model.X[2]*model.X[4])**2 + 222.77771224258694360287 * (model.X[2]*model.X[5])**2 - 0.77677547687310319335374e-1 * (model.X[3]*model.X[4])**2 + 61.808696207119893983872 * (model.X[3]*model.X[5])**2 + 11.670627765544026033240 * (model.X[4]*model.X[5])**2 + 0.18387443831910757485737 * (model.X[2]*model.X[3])**3 - 66.488781941566031719049 * (model.X[2]*model.X[5])**3 - 0.14190685534145726864018e-3 * (model.X[3]*model.X[4])**3 + 0.23834993299548209896551e-5 * (model.X[3]*model.X[4])**4 + 790.07378909611225026310 * (model.X[1]*model.X[2]*model.X[3])**-1 - 133768.20052458677673712 * (model.X[1]*model.X[2]*model.X[4])**-1 - 203528.65847958714584820 * (model.X[1]*model.X[3]*model.X[4])**-1 - 875490.96738101169466972 * (model.X[1]*model.X[3]*model.X[5])**-1 - 6465101.2705594822764397 * (model.X[1]*model.X[4]*model.X[5])**-1 - 101.35787448943952426816 * (model.X[2]*model.X[3]*model.X[4])**-1 - 370.56835061628885341634 * (model.X[2]*model.X[3]*model.X[5])**-1 - 215.72464058101465411710 * (model.X[2]*model.X[4]*model.X[5])**-1 + 5582.1630671149960107869 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.74290913735772370419044e-4 * (model.X[1]*model.X[2]*model.X[3])**2 - 0.21217440578306808424594e-8 * (model.X[1]*model.X[2]*model.X[4])**2 + 0.28885937839939607299283e-4 * (model.X[1]*model.X[4]*model.X[5])**2 + 0.41771268772162424565142e-1 * (model.X[2]*model.X[4]*model.X[5])**2 + 0.94308900652051261270792e-1 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.35927567217492325732115e-7 * (model.X[1]*model.X[2]*model.X[3])**3 - 0.15504058057517642934476e-6 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.20096420133116577634309e-5 * (model.X[3]*model.X[4]*model.X[5])**4 - 0.10046167907538315622329 * (model.X[2]/model.X[4])**-1 + 2.7298143049485563693679 * (model.X[3]/model.X[4])**-1 - 46919.142396231320162769 * (model.X[3]/model.X[5])**-1 + 155.74990586809215642461 * (model.X[4]/model.X[3])**-1 + 510412.77941204264061525 * (model.X[4]/model.X[5])**-1 + 762.28143160339675432624 * (model.X[5]/model.X[3])**-1 + 177179.37461011682171375 * (model.X[3]/model.X[1])**2 - 0.18816337541504760122457e-1 * (model.X[4]/model.X[3])**2 + 12.380096688816555783319 * (model.X[4]/model.X[5])**2 + 1398.9908268035128457996 * (model.X[4]/model.X[1])**3 + 0.69621241682837442348031e-4 * (model.X[4]/model.X[3])**3

                def Y3_constraint(m):
                    return model.Y[3] == 0.53910143440016788929370 * model.X[1] - 6.2198854698277532548900 * model.X[2] + 6.1642052272921654676452 * model.X[3] + 0.43143483347790545501255 * model.X[4] + 6887.8926264474712297670 * model.X[5] - 192.78684661509757347631 * log(model.X[1]) + 4.1773191720980396013374 * log(model.X[2]) - 4.4925389217755293813639 * log(model.X[3]) - 9.3022896027677273167455 * log(model.X[4]) - 1160.6717570053585859569 * log(model.X[5]) + 1.4320694469695671724452 * exp(model.X[2]) - 0.15625800154184585344375 * exp(model.X[3]) - 2158.5318904985233530169 * exp(model.X[5]) + 2.6202885951176573264831 * model.X[2]**-1 - 1.1376235783023502801115 * model.X[3]**-1 - 0.42428409254868385339088e-2 * model.X[4]**2 + 0.17196309432067248822466e-4 * model.X[4]**3 - 4.4568988980775028352355 * (model.X[1]*model.X[2])**-1 + 66.276661098304032293527 * (model.X[1]*model.X[3])**-1 - 17078.614764423185988562 * (model.X[1]*model.X[5])**-1 + 0.16532840242149715592745 * (model.X[2]*model.X[3])**-1 + 0.25324517525491006125771e-1 * (model.X[2]*model.X[4])**-1 - 1.2669070244934352853505 * (model.X[2]*model.X[5])**-1 - 7.9263455819358403786623 * (model.X[3]*model.X[4])**-1 - 54.212053718986524586398 * (model.X[4]*model.X[5])**-1 + 0.37670376764270460351965e-5 * (model.X[1]*model.X[2])**2 + 0.59982722316962169939143e-8 * (model.X[1]*model.X[4])**2 + 0.82601496945820293397750e-5 * (model.X[2]*model.X[4])**2 + 0.47251064093003543190377e-3 * (model.X[3]*model.X[4])**2 - 1.9471848031943004286859 * (model.X[3]*model.X[5])**2 - 0.48476334889292928745212e-5 * (model.X[3]*model.X[4])**3 + 0.36444755147064233913312 * (model.X[3]*model.X[5])**3 - 0.20989527290374526691252 * (model.X[2]*model.X[5])**4 + 0.14353963284041760872481e-7 * (model.X[3]*model.X[4])**4 - 2.8147864749595075117838 * (model.X[2]*model.X[3]*model.X[4])**-1 - 0.49542873101670057214840e-2 * (model.X[2]/model.X[4])**-1 - 0.42397195729577527231746e-2 * (model.X[3]/model.X[4])**-1

                def Y4_constraint(m):
                    return model.Y[4] == - 0.76368035092063100977011e-2 * model.X[1] + 0.23655461700212199877003e-1 * model.X[2] + 0.11356275931436463424995e-1 * model.X[3] - 0.13992787136443138925473e-2 * model.X[4] + 3109598.2108729705214500 * model.X[5] + 1.5098142433926413641387 * log(model.X[1]) + 0.10709733766178053393503 * log(model.X[3]) + 0.16279289768656574066696 * log(model.X[4]) - 138232032.21904814243317 * log(model.X[5]) + 0.10480942966637697005838e-1 * exp(model.X[2]) + 26981100.128056690096855 * exp(model.X[5]) - 74355890.526237905025482 * model.X[5]**-1 - 2095948.8468892676755786 * model.X[5]**6 - 20.533708089730442480914 * (model.X[3]*model.X[4])**-1 - 0.73273781044346370791765e-6 * (model.X[1]*model.X[2])**2 - 0.66200932473028150163086e-2 * (model.X[3]*model.X[4])**2 + 0.86099044592571826145337e-4 * (model.X[3]*model.X[4])**3 - 0.30487498783392997071814e-6 * (model.X[3]*model.X[4])**4 + 21.848575490314690483729 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.66536501853122756097725e-2 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.87257148582183294933598e-4 * (model.X[3]*model.X[4]*model.X[5])**3 + 0.31123216364481269807091e-6 * (model.X[3]*model.X[4]*model.X[5])**4

        elif N == 1000:
            if cID == 1:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == - 9.1191157820396497868387 * model.X[1] + 338.60539342188513955989 * model.X[3] + 352.48798115931765551068 * model.X[4] - 1247.1103688082014286920 * model.X[5] + 2898.9039582925724971574 * log(model.X[1]) + 8.4777500062860102758577 * log(model.X[3]) - 5995.3859571919856534805 * log(model.X[4]) + 4.4365461480663412885406 * exp(model.X[2]) - 1.0546463271350892121347 * exp(model.X[3]) + 281.18611067046742846287 * model.X[2]**-1 + 335.07494894427384224400 * model.X[3]**-1 - 20487.308795908702450106 * model.X[4]**-1 - 4.0813979289558162122376 * model.X[4]**2 + 0.23091059727716502225636e-1 * model.X[4]**3 - 49080.087250256103288848 * (model.X[1]*model.X[2])**-1 - 962304.98101028543896973 * (model.X[1]*model.X[4])**-1 - 5717.8754195069423076347 * (model.X[2]*model.X[4])**-1 - 4544.6547917627995047951 * (model.X[3]*model.X[4])**-1 + 2.1948486779540421487411 * (model.X[2]*model.X[3])**2 - 0.54918389266952104266206e-1 * (model.X[3]*model.X[4])**2 - 0.40402748340022521209724e-6 * (model.X[1]*model.X[2])**3 - 0.27221531124065861950712 * (model.X[2]*model.X[3])**3 - 0.13349048255218482655123e-4 * (model.X[2]*model.X[4])**3 + 0.19860960515995999386279e-3 * (model.X[3]*model.X[4])**3 + 1056116.5530769980978221 * (model.X[1]*model.X[2]*model.X[4])**-1 - 0.24503823645744484023556e-2 * (model.X[2]*model.X[3]*model.X[4])**2 + 0.74004258475319254314455e-5 * (model.X[2]*model.X[3]*model.X[4])**3 + 260946.59230887526064180 * (model.X[1]/model.X[5])**-1 - 0.59077857332107408527833 * (model.X[2]/model.X[4])**-1 - 4.8266229409190151145026 * (model.X[3]/model.X[4])**-1 - 6437.1973668946957332082 * (model.X[4]/model.X[3])**-1 + 6999.0303755675249703927 * (model.X[3]/model.X[4])**2

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == 0.66466442944758341582201 * model.X[1] + 1.0154154278759597307413 * model.X[2] + 6.9927851730616490399939 * model.X[3] + 6.9429521375752418776983 * model.X[4] + 444.65618310577207239476 * model.X[5] - 52.174643119853520545348 * log(model.X[1]) - 0.38695691846268343017101 * log(model.X[2]) + 0.33860222254104240836858e-2 * log(model.X[3]) - 115.77884766460785215259 * log(model.X[4]) - 367.68943428887160962404 * log(model.X[5]) - 0.29746884008093742168821e-1 * exp(model.X[3]) + 6.2237310046808653751782 * model.X[3]**-1 - 495.15092784568588513139 * model.X[4]**-1 - 0.82837425820952798050101e-1 * model.X[4]**2 + 0.48121434898760822532898e-3 * model.X[4]**3 + 4.8016966269668683864325 * (model.X[2]*model.X[4])**-1 - 84.166803485176203025731 * (model.X[3]*model.X[4])**-1 - 0.57500554579812282753027e-5 * (model.X[1]*model.X[2])**2 - 0.10207310081678062571586e-2 * (model.X[1]*model.X[5])**2 + 0.28189431465081484645685e-1 * (model.X[2]*model.X[3])**2 - 0.28884949424234682255515e-5 * (model.X[2]*model.X[4])**2 - 0.10910245454322546002773e-2 * (model.X[3]*model.X[4])**2 + 0.40069143247060913168300e-5 * (model.X[3]*model.X[4])**3 - 0.90909819085213399783438e-6 * (model.X[1]*model.X[2]*model.X[3])**2 - 0.41536866853546907448359e-4 * (model.X[2]*model.X[3]*model.X[4])**2 + 0.12040176609801449022573e-6 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.14710884364816673164356 * (model.X[2]/model.X[3])**-1 - 0.89175643353342604058298e-1 * (model.X[3]/model.X[4])**-1 - 122.15005058691572514817 * (model.X[4]/model.X[3])**-1 + 133.36002438168222283821 * (model.X[3]/model.X[4])**2

                def Y2_constraint(m):
                    return model.Y[2] == 80.582352966028921059660 * model.X[1] - 18.734189739141161368252 * model.X[2] + 0.55863631976897742958954 * model.X[3] - 2.1875530854423170801226 * model.X[4] + 1375634.3683531272690743 * model.X[5] - 14855.022703206786900409 * log(model.X[1]) + 9.0524840610534909046692 * log(model.X[2]) - 0.59402606503961830064497 * log(model.X[3]) - 0.29058549630680596820298 * log(model.X[4]) - 2545360.7193514220416546 * log(model.X[5]) - 3.2900715682740027112629 * exp(model.X[2]) - 0.15353469016564055826812 * exp(model.X[3]) - 24909.685710980142175686 * exp(model.X[5]) - 2945050.2260743994265795 * model.X[1]**-1 + 3206.1761671349036078027 * model.X[2]**-1 - 2898.1300472626589908032 * model.X[3]**-1 - 108325.17732301505748183 * model.X[4]**-1 - 1237854.3404809883795679 * model.X[5]**-1 - 0.66875742016964528913192e-1 * model.X[1]**2 + 525.39104061907323739433 * model.X[2]**2 + 4.1841836837422237138640 * model.X[3]**2 + 0.16807886036943511798292e-1 * model.X[4]**2 - 51217.705417613957251888 * (model.X[1]*model.X[2])**-1 + 172.29204889858453952911 * (model.X[1]*model.X[3])**-1 - 248359.37212871643714607 * (model.X[1]*model.X[4])**-1 + 1014228.9610689389519393 * (model.X[1]*model.X[5])**-1 + 4.6038473719114065829672 * (model.X[2]*model.X[3])**-1 - 99.213178502807338077218 * (model.X[2]*model.X[4])**-1 - 1727.8605670956319499965 * (model.X[2]*model.X[5])**-1 - 272.35827720967171217126 * (model.X[3]*model.X[4])**-1 + 1438.9582038424764505180 * (model.X[3]*model.X[5])**-1 + 53214.795778596766467672 * (model.X[4]*model.X[5])**-1 - 0.50930640055074844537580e-3 * (model.X[1]*model.X[2])**2 - 0.77831934528126210486032e-4 * (model.X[1]*model.X[3])**2 - 0.76839762366544017927069e-6 * (model.X[1]*model.X[4])**2 - 0.58623327555863196866581e-2 * (model.X[1]*model.X[5])**2 - 0.17155682898387966239112e-2 * (model.X[2]*model.X[4])**2 - 268.45602625811181951576 * (model.X[2]*model.X[5])**2 - 0.35431450198496294672068e-2 * (model.X[3]*model.X[4])**2 - 4.1620245192353948482378 * (model.X[3]*model.X[5])**2 - 0.17281582207178070031972e-1 * (model.X[4]*model.X[5])**2 - 0.28136929697676921003166e-7 * (model.X[1]*model.X[2])**3 - 0.14249852304661855053243e-6 * (model.X[2]*model.X[4])**3 - 3.5906045242323378907656 * (model.X[2]*model.X[5])**3 + 0.11396284406562903393891e-4 * (model.X[3]*model.X[4])**3 + 0.95581802814998917394718 * (model.X[2]*model.X[5])**4 + 0.54124625398180607402376e-2 * (model.X[3]*model.X[5])**5 - 1930.6848391627361252176 * (model.X[1]*model.X[2]*model.X[4])**-1 + 50073.300131515345128719 * (model.X[1]*model.X[2]*model.X[5])**-1 - 2541.9171969751769211143 * (model.X[1]*model.X[3]*model.X[4])**-1 - 550.49587950949387504807 * (model.X[1]*model.X[3]*model.X[5])**-1 + 234842.18816390683059581 * (model.X[1]*model.X[4]*model.X[5])**-1 - 0.61960958006567290468070 * (model.X[2]*model.X[3]*model.X[4])**-1 - 4.5446415337565024827882 * (model.X[2]*model.X[3]*model.X[5])**-1 + 108.77032317392175286841 * (model.X[2]*model.X[4]*model.X[5])**-1 + 284.22819839475386061167 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.54525255311432103098868e-3 * (model.X[1]*model.X[2]*model.X[5])**2 + 0.79469069105627803415240e-4 * (model.X[1]*model.X[3]*model.X[5])**2 + 0.78507389349579343938002e-6 * (model.X[1]*model.X[4]*model.X[5])**2 + 0.34482746568128636927746e-5 * (model.X[2]*model.X[3]*model.X[4])**2 + 0.17564020480048383923005e-2 * (model.X[2]*model.X[4]*model.X[5])**2 + 0.36018027903232563598224e-2 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.13433657342804806350245e-7 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.11692720925224591921516e-4 * (model.X[3]*model.X[4]*model.X[5])**3 + 304.93700420918412419269 * (model.X[1]/model.X[2])**-1 + 1020047.2252150191925466 * (model.X[1]/model.X[5])**-1 - 0.28441976554737208315871e-1 * (model.X[2]/model.X[1])**-1 - 0.12352073587943053489813e-2 * (model.X[2]/model.X[4])**-1 - 1465.2502102880407619523 * (model.X[2]/model.X[5])**-1 - 0.15155857939391769242943e-1 * (model.X[3]/model.X[1])**-1 - 0.10261531803091555447444e-2 * (model.X[3]/model.X[4])**-1 + 1463.9430836793483194924 * (model.X[3]/model.X[5])**-1 - 0.46477403213685214433681 * (model.X[4]/model.X[1])**-1 + 55270.371049918430799153 * (model.X[4]/model.X[5])**-1 + 2.1835357413079732324945 * (model.X[5]/model.X[4])**-1 - 245.20463067468745066435 * (model.X[2]/model.X[5])**2

                def Y3_constraint(m):
                    return model.Y[3] == 1.9059633406857492410325 * model.X[1] - 0.34311277989988669956389 * model.X[2] + 0.57865252206924157329926e-1 * model.X[3] - 0.26018108209052610152456e-1 * model.X[4] + 32092.519799416029854910 * model.X[5] - 346.93818366776508810290 * log(model.X[1]) + 0.10597886784951529581811 * log(model.X[2]) - 0.29559196036613302055462e-1 * log(model.X[3]) + 0.62864096212075715186529 * log(model.X[4]) - 61903.150260456146497745 * log(model.X[5]) + 0.18900579438897677220233 * exp(model.X[2]) + 0.46616745504969581137544e-3 * exp(model.X[3]) - 120.00234889354213407842 * exp(model.X[5]) + 126760.55412663175957277 * model.X[1]**-1 + 2.6551529449199007260063 * model.X[2]**-1 - 127.44011919461064508141 * model.X[3]**-1 - 572.24388276975685130310 * model.X[4]**-1 - 30136.521322638065612409 * model.X[5]**-1 - 0.17425329766367486650225e-2 * model.X[1]**2 + 0.94029230961241092034975e-2 * model.X[3]**2 + 0.24330815843821001348557e-1 * model.X[4]**2 - 0.45818139526437345711361e-5 * model.X[4]**3 - 0.28747822792601539221291e-1 * model.X[2]**4 - 458.37274869713223779399 * (model.X[1]*model.X[2])**-1 - 6201.9279388634568022098 * (model.X[1]*model.X[4])**-1 - 74013.462679517673677765 * (model.X[1]*model.X[5])**-1 + 0.14353725402953777454118e-2 * (model.X[2]*model.X[3])**-1 - 3.6497941915581266769664 * (model.X[2]*model.X[4])**-1 - 2.6183835357829052803424 * (model.X[2]*model.X[5])**-1 - 6.9500469017921053804798 * (model.X[3]*model.X[4])**-1 + 63.114189332226068529508 * (model.X[3]*model.X[5])**-1 + 270.27492936705067450021 * (model.X[4]*model.X[5])**-1 + 0.71994024536702463226348e-6 * (model.X[1]*model.X[2])**2 - 0.20572384530764444757150e-6 * (model.X[1]*model.X[3])**2 - 0.66885578598480302641523e-9 * (model.X[1]*model.X[4])**2 + 0.46057616182338229321013e-4 * (model.X[2]*model.X[4])**2 - 0.16089110282922980399434 * (model.X[2]*model.X[5])**2 + 0.35347227605550291277756e-5 * (model.X[3]*model.X[4])**2 - 0.10576445949997410889143e-1 * (model.X[3]*model.X[5])**2 - 0.12285169106483860221313e-1 * (model.X[4]*model.X[5])**2 + 0.10151075279321052920775e-9 * (model.X[1]*model.X[3])**3 - 0.36225603540759821585471e-6 * (model.X[2]*model.X[4])**3 + 0.29326579883172700091709e-1 * (model.X[2]*model.X[5])**3 - 0.16212165288059857565834e-7 * (model.X[3]*model.X[4])**3 + 0.26150219656549223880965e-5 * (model.X[4]*model.X[5])**3 + 0.93036043620445943447272e-1 * (model.X[1]*model.X[2]*model.X[3])**-1 + 457.16203131472576615124 * (model.X[1]*model.X[2]*model.X[5])**-1 - 40.213253818428171371124 * (model.X[1]*model.X[3]*model.X[4])**-1 + 5601.8626618504513317021 * (model.X[1]*model.X[4]*model.X[5])**-1 - 0.28531413031893427395547e-1 * (model.X[2]*model.X[3]*model.X[4])**-1 + 3.6191056181411376257984 * (model.X[2]*model.X[4]*model.X[5])**-1 + 7.2650238242346070194344 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.45682564494806808693111e-4 * (model.X[2]*model.X[4]*model.X[5])**2 - 0.56709468713792577662216e-9 * (model.X[1]*model.X[2]*model.X[5])**3 + 0.36263229295704078354042e-6 * (model.X[2]*model.X[4]*model.X[5])**3 + 10.979616481663633464905 * (model.X[1]/model.X[2])**-1 - 6.8316127919958749004081 * (model.X[1]/model.X[3])**-1 - 1.0485576411154884368671 * (model.X[1]/model.X[4])**-1 - 73722.389431696778046899 * (model.X[1]/model.X[5])**-1 - 0.50829014376250587433931e-4 * (model.X[2]/model.X[4])**-1 + 0.10168692205984624277095e-3 * (model.X[3]/model.X[4])**-1 + 64.311890289638455442400 * (model.X[3]/model.X[5])**-1 + 0.22813246149636337567479 * (model.X[4]/model.X[3])**-1 + 310.59541993724195663162 * (model.X[4]/model.X[5])**-1 - 0.26058125481889061548016e-3 * (model.X[1]/model.X[4])**2 - 0.26233073287274188967189 * (model.X[3]/model.X[4])**2 - 0.11669193351401874192419e-1 * (model.X[4]/model.X[5])**2

                def Y4_constraint(m):
                    return model.Y[4] == - 0.87254536687149580886924e-1 * model.X[1] + 0.73942834322408820812988e-1 * model.X[2] + 0.82589798555098270504971 * model.X[3] + 0.79552826079606531184396 * model.X[4] - 126.41270940603678241132 * model.X[5] + 30.459813601797261384263 * log(model.X[1]) + 0.13941139733808966677531e-1 * log(model.X[2]) + 0.27529080492769589932900e-1 * log(model.X[3]) - 13.560081388344986663697 * log(model.X[4]) + 111.69268498443199177927 * log(model.X[5]) - 0.23730804534773711732265e-2 * exp(model.X[3]) + 0.79470138108491827910740 * model.X[3]**-1 - 58.003144448725919346543 * model.X[4]**-1 - 0.92063376201156049000174e-2 * model.X[4]**2 + 0.51976090656017264509791e-4 * model.X[4]**3 + 0.77489949531261304027652 * (model.X[2]*model.X[4])**-1 - 10.699689400482123247116 * (model.X[3]*model.X[4])**-1 - 0.61422046224497641918815e-6 * (model.X[1]*model.X[2])**2 + 0.40344159218777680964152e-2 * (model.X[2]*model.X[3])**2 - 0.13344615306186676591434e-3 * (model.X[3]*model.X[4])**2 - 0.20924707926627162254436e-8 * (model.X[2]*model.X[4])**3 + 0.48383455867784322712485e-6 * (model.X[3]*model.X[4])**3 - 0.12250920227983609481405e-6 * (model.X[1]*model.X[2]*model.X[3])**2 - 0.37457228411203537886257e-5 * (model.X[2]*model.X[3]*model.X[4])**2 + 0.10724736899479662623147e-7 * (model.X[2]*model.X[3]*model.X[4])**3 + 2638.1407762033618382702 * (model.X[1]/model.X[5])**-1 - 0.11267477976582980850329e-1 * (model.X[3]/model.X[4])**-1 - 15.410217396201719708415 * (model.X[4]/model.X[3])**-1 - 0.14126053536745646153211e-2 * (model.X[3]/model.X[2])**2 + 16.936889699350974325398 * (model.X[3]/model.X[4])**2 + 8.6498807903019336862371 * (model.X[2]/model.X[4])**3

            elif cID == 2:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == - 13.534000906527325014395 * model.X[1] - 4122.5018186115275966586 * model.X[2] + 29.782701168664871715919 * model.X[3] - 449194806.71548140048981 * model.X[4] + 99.810641920846961738789 * model.X[5] - 39.077195679469198807965 * log(model.X[1]) + 68.140548479650277613473 * log(model.X[2]) - 812.38739286212137358234 * log(model.X[3]) + 911019601.75871622562408 * log(model.X[4]) - 45.843977183717946388697 * exp(model.X[2]) - 2326443.6226638960652053 * exp(model.X[4]) - 88.622032293484849674314 * model.X[2]**-1 + 68119.592772430536570027 * model.X[3]**-1 + 455520899.21077555418015 * model.X[4]**-1 + 0.46988283084908333275820 * model.X[3]**2 - 0.53045972101899119266477 * model.X[2]**4 - 837.68204301753860363533 * (model.X[1]*model.X[2])**-1 - 87853.495359834108967334 * (model.X[2]*model.X[3])**-1 + 2092.8945596324742837169 * (model.X[2]*model.X[5])**-1 - 73795.892913099756697193 * (model.X[3]*model.X[4])**-1 + 14850.045938580098663806 * (model.X[3]*model.X[5])**-1 + 4.5472155396511615421673 * (model.X[1]*model.X[2])**2 + 0.59529658883821362502786e-1 * (model.X[1]*model.X[3])**2 - 3.5709236736085805397067 * (model.X[2]*model.X[3])**2 - 0.70493759507180320245112 * (model.X[3]*model.X[4])**2 - 0.52941687670845294366728 * (model.X[1]*model.X[2])**3 - 0.10086504840597294071353e-2 * (model.X[1]*model.X[3])**3 + 0.31710299006727428461350e-1 * (model.X[2]*model.X[3])**3 + 0.51886682443725051612428e-5 * (model.X[1]*model.X[3])**4 - 0.84954333390647147699302e-4 * (model.X[2]*model.X[3])**4 + 8.4244944245754975753471 * (model.X[2]*model.X[4])**4 - 586.93824659761219209031 * (model.X[1]*model.X[2]*model.X[3])**-1 + 856.73844488455483769940 * (model.X[1]*model.X[2]*model.X[4])**-1 + 88089.078781263451674022 * (model.X[2]*model.X[3]*model.X[4])**-1 - 2068.4419044063424735214 * (model.X[2]*model.X[4]*model.X[5])**-1 - 14518.164773100075763068 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.51992417062395410859432e-2 * (model.X[1]*model.X[2]*model.X[3])**2 + 3.7004176886438941984636 * (model.X[2]*model.X[3]*model.X[4])**2 + 0.15366935713203960079233e-4 * (model.X[1]*model.X[2]*model.X[3])**3 - 0.33319819701076600071410e-1 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.90667460681077382926574e-4 * (model.X[2]*model.X[3]*model.X[4])**4 - 0.75968303107946288932339 * (model.X[1]/model.X[3])**-1 + 3.9339072407007504850185 * (model.X[2]/model.X[3])**-1 + 4116.3375577091674131225 * (model.X[4]/model.X[2])**-1 - 0.12842480423448219065130e-1 * (model.X[3]/model.X[2])**2

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == - 0.30623565276462094697507 * model.X[1] + 0.98286080525288876952317 * model.X[2] + 1.1817592249666393211527 * model.X[3] - 12093487.716961054131389 * model.X[4] + 2.1582356291680433457714 * model.X[5] - 0.61314241027573457287758 * log(model.X[1]) - 2.6769572637204843701397 * log(model.X[2]) - 22.598624964408163151575 * log(model.X[3]) + 24544532.211160954087973 * log(model.X[4]) - 65870.518217137665487826 * exp(model.X[4]) - 11871.762783885684257257 * model.X[2]**-1 - 1544.0414928602924646839 * model.X[3]**-1 + 12272594.981820961460471 * model.X[4]**-1 + 0.54046274217207619997017e-4 * model.X[3]**3 - 22.276785165052707782252 * (model.X[1]*model.X[2])**-1 - 953.75593298213516391115 * (model.X[2]*model.X[3])**-1 + 5885.7863989577863321756 * (model.X[2]*model.X[4])**-1 + 25.670516126169676596191 * (model.X[2]*model.X[5])**-1 + 1416.7156836183542054641 * (model.X[3]*model.X[4])**-1 + 1126.7179161893229775160 * (model.X[3]*model.X[5])**-1 + 0.15753695016820204455321 * (model.X[1]*model.X[2])**2 + 0.10408425062356817854953e-2 * (model.X[1]*model.X[3])**2 - 0.49969656114184642092813e-1 * (model.X[2]*model.X[3])**2 - 0.12666093894398306948790e-1 * (model.X[3]*model.X[4])**2 - 0.10714742360059415632323e-1 * (model.X[1]*model.X[2])**3 - 0.18149245338938992507189e-4 * (model.X[1]*model.X[3])**3 + 0.48548544774490724924842e-3 * (model.X[2]*model.X[3])**3 + 0.95796569558443216202508e-7 * (model.X[1]*model.X[3])**4 - 0.13322764094351282491621e-5 * (model.X[2]*model.X[3])**4 - 10.373857457753043576076 * (model.X[1]*model.X[2]*model.X[3])**-1 + 22.541823208808935419256 * (model.X[1]*model.X[2]*model.X[4])**-1 + 942.10733138319710633368 * (model.X[2]*model.X[3]*model.X[4])**-1 - 25.256583440629821524226 * (model.X[2]*model.X[4]*model.X[5])**-1 - 1115.2866599302558370255 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.62199805529849073841564e-4 * (model.X[1]*model.X[2]*model.X[3])**2 - 0.72801105297465945609403e-1 * (model.X[1]*model.X[2]*model.X[4])**2 + 0.51897955864251568702805e-1 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.51222385155422754145216e-3 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.67846644750786160710032e-9 * (model.X[1]*model.X[2]*model.X[3])**4 + 0.14314202724863081075978e-5 * (model.X[2]*model.X[3]*model.X[4])**4 - 0.13002234638187490367578e-1 * (model.X[1]/model.X[3])**-1 + 0.69489056153478881081020e-2 * (model.X[2]/model.X[3])**-1 + 5984.6306731744425633224 * (model.X[2]/model.X[4])**-1 - 9.0373874140361323270554 * (model.X[3]/model.X[2])**-1

                def Y2_constraint(m):
                    return model.Y[2] == 196.59200721926205801537 * model.X[1] + 31.432901187491836481058 * model.X[2] + 315.85091851270232155002 * model.X[3] + 20652637.314633697271347 * model.X[4] + 772.98387320379686116212 * model.X[5] - 162.95010410104745801618 * log(model.X[1]) - 28.427347182993546681473 * log(model.X[2]) - 3112.8985674672462664603 * log(model.X[3]) - 41607714.720005929470062 * log(model.X[4]) + 14.732692080103019449666 * exp(model.X[1]) + 0.52018931175290095136887 * exp(model.X[2]) + 56870.886879500532813836 * exp(model.X[4]) - 607.22433308247218519682 * exp(model.X[5]) - 35.085229323483055452471 * model.X[1]**-1 + 554.69757751139786705608 * model.X[2]**-1 - 2089214.9627174676861614 * model.X[3]**-1 - 20800897.035978406667709 * model.X[4]**-1 + 40.620332986933064489676 * model.X[2]**2 - 7.6762738099230709565290 * model.X[3]**2 + 0.14756540747177249173205 * model.X[3]**3 - 0.16380707474464573092376e-2 * model.X[3]**4 + 650.60707015963396315783 * model.X[5]**4 + 0.75850564292899112569667e-5 * model.X[3]**5 - 2.2541456191485913507222 * (model.X[1]*model.X[2])**-1 - 58.115849280276506760856 * (model.X[1]*model.X[3])**-1 - 18.671151562673941270987 * (model.X[1]*model.X[5])**-1 - 11518.114859885890837177 * (model.X[2]*model.X[3])**-1 - 548.75314392669440621830 * (model.X[2]*model.X[4])**-1 + 1029756.1700192139251158 * (model.X[3]*model.X[4])**-1 - 9.2174784631501101017648 * (model.X[1]*model.X[2])**2 + 0.12536282123088010598266 * (model.X[1]*model.X[3])**2 - 58.065322548337206853830 * (model.X[1]*model.X[4])**2 - 0.60997084981834211181440e-1 * (model.X[2]*model.X[3])**2 - 46.153350576322068832269 * (model.X[2]*model.X[4])**2 - 0.48747719674427814062767 * (model.X[3]*model.X[4])**2 - 0.21134781787627349158853 * (model.X[1]*model.X[2])**3 - 0.13454633727890468949950e-2 * (model.X[1]*model.X[3])**3 + 0.74419620030244303609222e-4 * (model.X[2]*model.X[3])**3 + 0.45809404255681886869445e-2 * (model.X[3]*model.X[4])**3 + 0.21198262974838639333131e-1 * (model.X[1]*model.X[2])**4 + 0.32328379183969991547156e-5 * (model.X[1]*model.X[3])**4 - 0.29329950283892843604524e-6 * (model.X[2]*model.X[3])**4 - 0.15993640268984419862842e-7 * (model.X[1]*model.X[3])**5 - 530.80594637406318270223 * (model.X[4]*model.X[5])**6 + 33.954078236300773596668 * (model.X[1]*model.X[2]*model.X[3])**-1 + 17.974387013978432747763 * (model.X[1]*model.X[4]*model.X[5])**-1 + 11364.189932674851661432 * (model.X[2]*model.X[3]*model.X[4])**-1 + 13.598615604761709718673 * (model.X[2]*model.X[3]*model.X[5])**-1 + 0.53030344882726807053449e-4 * (model.X[1]*model.X[2]*model.X[3])**2 + 9.8330376813589541740157 * (model.X[1]*model.X[2]*model.X[4])**2 - 0.12309594276903505771781 * (model.X[1]*model.X[3]*model.X[4])**2 + 0.56127000676815606838854e-1 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.35782463035136996207242e-2 * (model.X[2]*model.X[3]*model.X[5])**2 + 0.34815069869047101440928e-5 * (model.X[1]*model.X[2]*model.X[3])**3 + 0.11590262801001341257112e-2 * (model.X[1]*model.X[3]*model.X[4])**3 + 0.87612046688528576367109e-5 * (model.X[1]*model.X[3]*model.X[5])**3 + 0.39330494480309120515840e-4 * (model.X[2]*model.X[3]*model.X[5])**3 - 0.12501573398108775324114e-7 * (model.X[1]*model.X[2]*model.X[3])**4 - 0.99843321145405825034480e-1 * (model.X[1]/model.X[3])**-1 - 0.42999375508429604764160 * (model.X[2]/model.X[3])**-1 + 1047312.2213602261617780 * (model.X[3]/model.X[4])**-1 + 0.13025564516062793519319e-2 * (model.X[3]/model.X[2])**2

                def Y3_constraint(m):
                    return model.Y[3] == - 13.918448298914029237494 * model.X[1] + 4.4942548526476198134105 * model.X[2] - 0.44602042231987126807979 * model.X[3] - 10717.620016347946148016 * model.X[4] + 0.40969960681122113976826 * model.X[5] - 0.10960266769604920522596 * log(model.X[1]) - 4.4259257332348997948657 * log(model.X[2]) + 9.3142980332642029139834 * log(model.X[3]) + 116.53827615681871066045 * log(model.X[4]) + 0.74432628640456674484760e-1 * exp(model.X[2]) + 3932.9789048592242579616 * exp(model.X[4]) + 6.9333821222524321115088 * model.X[1]**-1 - 2697.0566833887892244093 * model.X[2]**-1 + 127694.86410176219942514 * model.X[3]**-1 - 1.7726569946618693229823 * model.X[2]**2 + 1.5761469382641846159743 * model.X[3]**2 - 0.29591605723531755686587e-4 * model.X[3]**3 - 0.19829062621530624266342 * (model.X[1]*model.X[2])**-1 - 283.35780468535966747368 * (model.X[1]*model.X[3])**-1 - 6.7261945855910090230623 * (model.X[1]*model.X[4])**-1 + 105.95060326185947019439 * (model.X[2]*model.X[3])**-1 + 1331.4472688862899758533 * (model.X[2]*model.X[4])**-1 - 12.004645800841457159436 * (model.X[2]*model.X[5])**-1 - 63358.258934213496104348 * (model.X[3]*model.X[4])**-1 + 0.72077572566994108083094 * (model.X[3]*model.X[5])**-1 - 0.33501316471405376273829e-1 * (model.X[1]*model.X[2])**2 + 0.12178421986021663282144e-3 * (model.X[1]*model.X[3])**2 + 0.36937717656029354224012e-2 * (model.X[2]*model.X[3])**2 + 1.0800455518841880486747 * (model.X[2]*model.X[4])**2 - 0.79651804453683772155870 * (model.X[3]*model.X[4])**2 - 0.16431780266146936517885e-2 * (model.X[3]*model.X[5])**2 + 0.34762082670516999266530e-2 * (model.X[1]*model.X[2])**3 - 0.89451239352997262324185e-5 * (model.X[1]*model.X[3])**3 - 0.77806221571860333184167e-5 * (model.X[2]*model.X[3])**3 + 0.31880119869442144313332e-4 * (model.X[3]*model.X[5])**3 + 0.14716674407529506948582e-6 * (model.X[1]*model.X[3])**4 - 0.22564285342624070403801e-7 * (model.X[2]*model.X[3])**4 - 0.11423981525227552165706e-8 * (model.X[1]*model.X[3])**5 + 4.9021017102301858159308 * (model.X[1]*model.X[2]*model.X[3])**-1 + 277.53534708447136836185 * (model.X[1]*model.X[3]*model.X[4])**-1 - 121.66875117327525401834 * (model.X[2]*model.X[3]*model.X[4])**-1 + 3.1781213525677882714149 * (model.X[2]*model.X[3]*model.X[5])**-1 + 11.740007328156270460795 * (model.X[2]*model.X[4]*model.X[5])**-1 + 0.43975255855109273415461e-4 * (model.X[1]*model.X[2]*model.X[3])**2 - 0.42741400837742211243908e-2 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.12388099567597660668863e-6 * (model.X[1]*model.X[2]*model.X[3])**3 + 0.14308490988848005570004e-4 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.41746388519453562458264e-9 * (model.X[1]*model.X[3]*model.X[4])**5 - 0.42238491914388699710603e-1 * (model.X[2]/model.X[3])**-1 + 1365.9106312212613829615 * (model.X[2]/model.X[4])**-1 - 64272.680032840806234162 * (model.X[3]/model.X[4])**-1 + 14.042983933149816522246 * (model.X[4]/model.X[1])**-1 + 0.13038517284429037299334e-3 * (model.X[3]/model.X[2])**2 - 0.77400672372861867298610 * (model.X[3]/model.X[4])**2 - 8.5648352045632574203182 * (model.X[2]/model.X[3])**3

                def Y4_constraint(m):
                    return model.Y[4] == - 0.88884206268988776022955e-2 * model.X[1] + 0.19702103059144029928440 * model.X[2] + 0.75012381098893687880746e-1 * model.X[3] - 1055500.1235721074044704 * model.X[4] - 29.766820831087297705153 * model.X[5] + 0.24674177020626682915738e-1 * log(model.X[1]) - 0.44093321307728722269204e-1 * log(model.X[2]) - 1.6779214010401408696538 * log(model.X[3]) + 2140950.1940267505124211 * log(model.X[4]) - 0.86035815530626821856508e-1 * exp(model.X[2]) - 5514.7263487845666531939 * exp(model.X[4]) + 210.38459387068792239006 * model.X[3]**-1 + 1070494.8007156529929489 * model.X[4]**-1 - 0.49768776475518422194866e-3 * model.X[3]**2 + 0.16190401895184308722619e-1 * model.X[2]**4 - 35.439915592825194323723 * (model.X[1]*model.X[3])**-1 - 24.474452432560653392102 * (model.X[2]*model.X[3])**-1 + 1.9950064944204204397948 * (model.X[2]*model.X[5])**-1 - 219.08432220766448494942 * (model.X[3]*model.X[4])**-1 - 87.471980908050340985938 * (model.X[3]*model.X[5])**-1 - 0.70556391057989874607270e-2 * (model.X[1]*model.X[2])**2 - 0.45583560115052746794149e-5 * (model.X[1]*model.X[3])**2 - 0.46000521803942484577732e-2 * (model.X[2]*model.X[3])**2 - 0.25826037343085075334874e-4 * (model.X[3]*model.X[4])**2 + 0.27377408075454408992178e-2 * (model.X[1]*model.X[2])**3 + 0.43447378889335019403785e-4 * (model.X[2]*model.X[3])**3 - 0.30854735621620106621535e-3 * (model.X[1]*model.X[2])**4 - 0.11253594106905520181958e-6 * (model.X[2]*model.X[3])**4 - 0.19347611027206708476239e-2 * (model.X[2]*model.X[4])**4 + 0.11315016915416580001175 * (model.X[1]*model.X[2]*model.X[3])**-1 + 35.513583125922721706047 * (model.X[1]*model.X[3]*model.X[4])**-1 + 22.777538863385764500435 * (model.X[2]*model.X[3]*model.X[4])**-1 - 1.9598760501255412247446 * (model.X[2]*model.X[4]*model.X[5])**-1 + 87.433689804889908714358 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.51696927872036055611089e-5 * (model.X[1]*model.X[2]*model.X[3])**2 + 0.47808159474559252383186e-2 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.67719677021246477986804e-7 * (model.X[1]*model.X[2]*model.X[3])**3 - 0.45965852326028228092784e-4 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.20113562055187305668437e-9 * (model.X[1]*model.X[2]*model.X[3])**4 + 0.12169610112762081541661e-6 * (model.X[2]*model.X[3]*model.X[4])**4 + 0.66394648165153072761485e-3 * (model.X[2]/model.X[3])**-1 + 0.24109914689280617650091 * (model.X[3]/model.X[1])**-1 - 0.70790296050455392418144 * (model.X[3]/model.X[2])**-1 + 29.790286817929544582739 * (model.X[4]/model.X[5])**-1 - 0.59449435649536782992619e-5 * (model.X[3]/model.X[1])**2

            elif cID == 5:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == - 21.960012627941129181863 * model.X[1] + 23.825426052274135457765 * model.X[2] + 1625.9508123131072352408 * model.X[3] + 383.20889033668436240987 * model.X[4] + 974.83480939098046746949 * model.X[5] + 3408.3009236322682227183 * log(model.X[1]) + 771.45863852498575852223 * log(model.X[3]) - 6977.1701035611158658867 * log(model.X[4]) + 5.9285257023035491386054 * exp(model.X[2]) + 377.54652363761715605506 * exp(model.X[3]) + 551.70752705838890506129 * model.X[3]**-1 - 3244.5517507126887721824 * model.X[4]**-1 - 478.37443141657826117807 * model.X[3]**2 - 4.9115263049733073330572 * model.X[4]**2 + 0.36914756207079610361710e-1 * model.X[4]**3 - 11.487487268342633228713 * model.X[3]**5 - 11375.314588672865284025 * (model.X[3]*model.X[4])**-1 + 224.70715484624304281169 * (model.X[3]*model.X[5])**-1 - 0.54323476122309743811811e-3 * (model.X[1]*model.X[2])**2 - 0.37818916939926777720515 * (model.X[3]*model.X[4])**2 + 0.39602058547138428408821e-4 * (model.X[1]*model.X[5])**3 + 0.32047550033020718272814e-2 * (model.X[3]*model.X[4])**3 - 19.032930586962159225095 * (model.X[3]*model.X[5])**3 - 0.92113446001562091929081e-5 * (model.X[3]*model.X[4])**4 - 0.11300254651205752740863e-5 * (model.X[4]*model.X[5])**5 + 0.29493877367059562895314e-6 * (model.X[3]*model.X[4]*model.X[5])**4 + 7.9020878249085582112343 * (model.X[3]/model.X[4])**-1 - 54663.731538490916136652 * (model.X[4]/model.X[3])**-1 - 0.30438615779098114610957e-1 * (model.X[3]/model.X[2])**2 + 234106.35185775067657232 * (model.X[3]/model.X[4])**2 - 0.93722302848854785461974e-1 * (model.X[4]/model.X[3])**2 - 736428.98656745394691825 * (model.X[3]/model.X[4])**3 + 0.25207445340245688159692e-3 * (model.X[4]/model.X[3])**3 + 1014119.2069368266966194 * (model.X[3]/model.X[4])**4

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == - 0.19244691086264659185545 * model.X[1] - 5.5377758571313098201472 * model.X[2] + 39.450005646332222397632 * model.X[3] + 2.3920446013326097656204 * model.X[4] - 3.7766474791343531691723 * model.X[5] + 31.998696818947564679547 * log(model.X[1]) + 11.281357217762366218494 * log(model.X[2]) + 11.403732762833392655466 * log(model.X[3]) - 61.272792058718266616779 * log(model.X[4]) + 31.212964687246117279074 * log(model.X[5]) + 0.21605712911102353812609 * exp(model.X[2]) + 0.55415690683971896568494 * exp(model.X[3]) + 15.341382047940056665425 * model.X[2]**-1 + 15.321298949832183211583 * model.X[3]**-1 + 715.01798894535943418305 * model.X[4]**-1 - 2.6152036067132522489942 * model.X[3]**2 - 0.17886688863076424110821e-1 * model.X[4]**2 - 1291.8721428451133306226 * (model.X[1]*model.X[2])**-1 - 246.13911302305166373117 * (model.X[3]*model.X[4])**-1 - 320.40364626518976365332 * (model.X[4]*model.X[5])**-1 - 0.82274606482358944581357e-2 * (model.X[3]*model.X[4])**2 + 0.69854382616419490015756e-4 * (model.X[3]*model.X[4])**3 - 0.19451061421332314659951e-6 * (model.X[3]*model.X[4])**4 - 0.89616295709775015132514e-1 * (model.X[3]*model.X[5])**4 + 0.81668637337479768611992e-1 * (model.X[3]/model.X[4])**-1 - 1144.3966651933378670947 * (model.X[4]/model.X[3])**-1 - 0.30897198401994810552929e-4 * (model.X[1]/model.X[2])**2 + 4921.9011766768508095993 * (model.X[3]/model.X[4])**2 - 0.14062398576820140522203e-2 * (model.X[4]/model.X[3])**2 - 15439.848039016105758492 * (model.X[3]/model.X[4])**3 + 0.34795185470757234104833e-5 * (model.X[4]/model.X[3])**3 + 0.94253866333922657269606e-4 * (model.X[4]/model.X[5])**3 + 21070.956869379206182202 * (model.X[3]/model.X[4])**4 + 711.04440624869459952606 * (model.X[4]/model.X[1])**6

                def Y2_constraint(m):
                    return model.Y[2] == 6.0213423504685321674401 * model.X[1] - 248.11546211331392441934 * model.X[2] + 0.12621534123777194968952 * model.X[3] + 0.25306635653344278918953e-1 * model.X[4] + 118014219.80532668530941 * model.X[5] - 1148.6942073677328153281 * log(model.X[1]) + 19.223756653194001842166 * log(model.X[2]) - 0.43579614480517425700867 * log(model.X[3]) - 0.35681496151732577937210e-1 * log(model.X[4]) - 155234246.91024941205978 * log(model.X[5]) - 10.189055718601917277510 * exp(model.X[2]) - 0.22922495867603517871736e-2 * exp(model.X[3]) - 29687731.731721725314856 * exp(model.X[5]) - 10497372.040963640436530 * model.X[1]**-1 - 3480.8612140048198853037 * model.X[2]**-1 + 2423.1351255870708882867 * model.X[3]**-1 + 80129.510320331362891011 * model.X[4]**-1 - 64179483.946350589394569 * model.X[5]**-1 - 16.516523168144789934786 * model.X[2]**2 + 26870346.938301973044872 * model.X[5]**2 + 2.4411928647949014958840 * model.X[2]**4 - 34545.890482864655496087 * (model.X[1]*model.X[2])**-1 + 15656.037422952198539861 * (model.X[1]*model.X[3])**-1 + 445148.44253265776205808 * (model.X[1]*model.X[4])**-1 + 5223633.5032514221966267 * (model.X[1]*model.X[5])**-1 + 0.75079589125082946132750 * (model.X[2]*model.X[3])**-1 + 183.46004950057889004711 * (model.X[2]*model.X[4])**-1 + 1674.3401744892628357775 * (model.X[2]*model.X[5])**-1 + 104.30876675664066510762 * (model.X[3]*model.X[4])**-1 - 1155.4436508313422109495 * (model.X[3]*model.X[5])**-1 - 38372.796785653430561069 * (model.X[4]*model.X[5])**-1 - 0.47715347675884444301336e-3 * (model.X[1]*model.X[2])**2 - 0.46446419383322975904092e-7 * (model.X[1]*model.X[4])**2 - 0.50251954041428221683918e-2 * (model.X[1]*model.X[5])**2 - 0.89417902884529734675034e-1 * (model.X[2]*model.X[3])**2 + 0.10346111101934321242253e-5 * (model.X[2]*model.X[4])**2 + 48.556535473262229629654 * (model.X[2]*model.X[5])**2 - 0.36626471126515808751298e-3 * (model.X[3]*model.X[4])**2 + 0.20416874267840992664478e-7 * (model.X[1]*model.X[2])**3 - 8.4774968103324273016597 * (model.X[2]*model.X[5])**3 - 0.35728162721022103700318e-6 * (model.X[3]*model.X[4])**3 + 0.13494920303981943718284e-7 * (model.X[3]*model.X[4])**4 + 32448.848476793391455431 * (model.X[1]*model.X[2]*model.X[5])**-1 - 1674.1089267890943119710 * (model.X[1]*model.X[3]*model.X[4])**-1 - 15889.450455249514561729 * (model.X[1]*model.X[3]*model.X[5])**-1 - 455360.16195064800558612 * (model.X[1]*model.X[4]*model.X[5])**-1 - 0.93056543527300761287080 * (model.X[2]*model.X[3]*model.X[4])**-1 - 0.70469603876045405765893 * (model.X[2]*model.X[3]*model.X[5])**-1 - 181.85675255452426313241 * (model.X[2]*model.X[4]*model.X[5])**-1 - 93.810062014842316102659 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.43843989507052133014833e-3 * (model.X[1]*model.X[2]*model.X[5])**2 + 0.46333872907179521437716e-7 * (model.X[1]*model.X[4]*model.X[5])**2 + 0.91426230184835352576833e-1 * (model.X[2]*model.X[3]*model.X[5])**2 + 0.40215108184777622951298e-3 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.32319588011247577047408e-8 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.12583478917428460296660e-7 * (model.X[3]*model.X[4]*model.X[5])**4 - 1314.3714776693182102463 * (model.X[1]/model.X[2])**-1 - 3.9920656551192323924226 * (model.X[1]/model.X[4])**-1 + 5204865.1589470114558935 * (model.X[1]/model.X[5])**-1 - 0.50371408380594437370625e-1 * (model.X[2]/model.X[1])**-1 - 0.10956867467987985945849e-2 * (model.X[2]/model.X[4])**-1 + 1830.5025423545207559073 * (model.X[2]/model.X[5])**-1 - 0.14593140585055425217931e-1 * (model.X[3]/model.X[1])**-1 - 1264.2944643543205529568 * (model.X[3]/model.X[5])**-1 - 0.40013696979835527978153 * (model.X[4]/model.X[1])**-1 - 41630.739558152425161097 * (model.X[4]/model.X[5])**-1 + 220.85346808629401493818 * (model.X[5]/model.X[2])**-1 + 0.20339394191792618943044e-5 * (model.X[1]/model.X[3])**2 - 0.14181098437783996216196e-8 * (model.X[1]/model.X[2])**3

                def Y3_constraint(m):
                    return model.Y[3] ==   0.45022161628818667053475e-2 * model.X[1] + 0.23590284166386701891760 * model.X[2] - 0.12125038823216121447457e-1 * model.X[3] + 0.44200516476522559716766e-2 * model.X[4] - 7114321.9127855347469449 * model.X[5] + 1.2977865254065656941407 * log(model.X[1]) - 0.96737123226157364919153e-1 * log(model.X[2]) + 0.61949860972230720232434e-2 * log(model.X[3]) - 0.48612301054704945557638e-1 * log(model.X[4]) + 9393105.5420288480818272 * log(model.X[5]) - 0.52408278208314354462694e-1 * exp(model.X[2]) + 0.52126233223848798012216e-4 * exp(model.X[3]) + 1778591.4029500791803002 * exp(model.X[5]) + 2705.7416386149625395774 * model.X[1]**-1 + 2.2108774898731939906327 * model.X[2]**-1 - 39.164649295931127426229 * model.X[3]**-1 - 1099.2287580379031624034 * model.X[4]**-1 + 3890905.5571466740220785 * model.X[5]**-1 + 0.58961899028205833062088 * model.X[2]**2 - 0.65306912243114818962606e-6 * model.X[4]**2 - 1611302.9754449427127838 * model.X[5]**2 + 0.18880122829295994555873e-3 * model.X[2]**6 - 327.93329625319120168569 * (model.X[1]*model.X[2])**-1 - 164.74482098425895060245 * (model.X[1]*model.X[3])**-1 - 5673.5374824122091013123 * (model.X[1]*model.X[4])**-1 - 2570.6592423336760475649 * (model.X[1]*model.X[5])**-1 - 0.25957398839931457301677e-2 * (model.X[2]*model.X[3])**-1 - 0.39619654755233790766056 * (model.X[2]*model.X[4])**-1 - 2.1854514561027422736572 * (model.X[2]*model.X[5])**-1 - 2.4891845090244526517154 * (model.X[3]*model.X[4])**-1 + 18.787844207690802988964 * (model.X[3]*model.X[5])**-1 + 529.75797059327521765226 * (model.X[4]*model.X[5])**-1 - 0.14000193847398819147767e-4 * (model.X[1]*model.X[2])**2 + 0.39989819635216101014514e-7 * (model.X[1]*model.X[3])**2 + 0.29108497787426369605874e-9 * (model.X[1]*model.X[4])**2 + 0.13765034431590011799979e-5 * (model.X[1]*model.X[5])**2 + 0.60169897482144764182255e-3 * (model.X[2]*model.X[3])**2 + 0.24015004629581035165199e-5 * (model.X[2]*model.X[4])**2 - 0.66392672835799759756270 * (model.X[2]*model.X[5])**2 + 0.73762052779719323750639e-5 * (model.X[3]*model.X[4])**2 - 0.25725964906314412101337e-9 * (model.X[1]*model.X[2])**3 - 0.84338810609887747594829e-5 * (model.X[2]*model.X[3])**3 - 0.34306730870075231901767e-7 * (model.X[2]*model.X[4])**3 + 0.34451387669891281317902e-1 * (model.X[2]*model.X[5])**3 - 0.81617772720286183011511e-7 * (model.X[3]*model.X[4])**3 + 0.15432774371880366176036e-9 * (model.X[2]*model.X[4])**4 + 0.26397992079799991155696e-9 * (model.X[3]*model.X[4])**4 + 0.93910004132069346827194 * (model.X[1]*model.X[2]*model.X[3])**-1 + 74.275250919429780083192 * (model.X[1]*model.X[2]*model.X[4])**-1 + 320.57385930674320206890 * (model.X[1]*model.X[2]*model.X[5])**-1 - 56.605956880858869340045 * (model.X[1]*model.X[3]*model.X[4])**-1 + 180.71001006913846254065 * (model.X[1]*model.X[3]*model.X[5])**-1 + 5505.7749588020233204588 * (model.X[1]*model.X[4]*model.X[5])**-1 - 0.68250280524260936720893e-1 * (model.X[2]*model.X[3]*model.X[4])**-1 + 2.7552721050119539647483 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.15740889934905679940787e-7 * (model.X[1]*model.X[2]*model.X[3])**2 + 0.14457850355790388154325e-4 * (model.X[1]*model.X[2]*model.X[5])**2 - 0.59474678929593313345878e-9 * (model.X[1]*model.X[4]*model.X[5])**2 - 0.51510263822824484698742e-7 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.49144652081846051938641 * (model.X[1]/model.X[4])**-1 - 0.84536971235874122567594e-3 * (model.X[2]/model.X[3])**-1 - 0.82373757335052653840053e-4 * (model.X[2]/model.X[4])**-1 + 0.43086631386410686886737e-3 * (model.X[3]/model.X[1])**-1 + 20.214793874889291913632 * (model.X[3]/model.X[5])**-1 + 570.14855193452217463346 * (model.X[4]/model.X[5])**-1

                def Y4_constraint(m):
                    return model.Y[4] == - 0.42640050671357655753813e-1 * model.X[1] + 0.14148116758720524765991 * model.X[2] - 0.53559134620763515499675 * model.X[3] - 0.36451173781358364722749 * model.X[4] - 51.698128949082651217850 * model.X[5] + 6.6141152560364853130181 * log(model.X[1]) - 0.74034024725192437710319e-1 * log(model.X[2]) + 5.0638888692385046752520 * log(model.X[3]) + 8.1848179470505506571953 * log(model.X[4]) + 56.263471234376737584171 * log(model.X[5]) + 0.70962764694100996520909e-2 * exp(model.X[2]) + 0.15625319643248428147508 * exp(model.X[3]) + 1.7043643937048693626224 * model.X[3]**-1 + 189.36844222373900947787 * model.X[4]**-1 + 1.5280924926978840527880 * model.X[3]**2 + 0.46965373117429124946720e-2 * model.X[4]**2 - 0.30748446699927756142756 * model.X[3]**3 - 0.15794637862404058283950e-4 * model.X[4]**3 - 3.4715740299049828720968 * (model.X[1]*model.X[2])**-1 - 29.883295536053676499932 * (model.X[3]*model.X[4])**-1 + 1.0713985232973386452215 * (model.X[3]*model.X[5])**-1 - 0.13969668708126673611067e-5 * (model.X[1]*model.X[2])**2 + 0.21078780427978376348780e-4 * (model.X[1]*model.X[5])**2 - 0.99827153637517128566270e-3 * (model.X[3]*model.X[4])**2 - 0.24245093906118389548432 * (model.X[3]*model.X[5])**2 - 0.80538336062752221254646e-3 * (model.X[4]*model.X[5])**2 + 0.84673414983004957287162e-5 * (model.X[3]*model.X[4])**3 - 0.23600650469414844782511e-7 * (model.X[3]*model.X[4])**4 + 0.92789892891391133333823e-2 * (model.X[3]/model.X[4])**-1 - 139.55577921308386635246 * (model.X[4]/model.X[3])**-1 + 602.87563677820401153440 * (model.X[3]/model.X[4])**2 - 0.15331189071385219950365e-3 * (model.X[4]/model.X[3])**2 - 1920.3063464215445037553 * (model.X[3]/model.X[4])**3 + 0.29821960141027461049204e-6 * (model.X[4]/model.X[3])**3 + 2676.3034503405524446862 * (model.X[3]/model.X[4])**4 - 14281.034285323525182321 * (model.X[5]/model.X[4])**4

            elif cID == 6:
                if objective == 'mxp':
                    def Y1_constraint(m):
                        return model.Y[1] == 1.4215253745976410559848 * model.X[1] + 2480.0937791044166260690 * model.X[3] + 2.2825302197235122214636 * model.X[4] + 80150284890.498428344727 * model.X[5] + 35.692005739960855237314 * log(model.X[3]) - 106099068972.67013549805 * log(model.X[5]) - 19939781717.732276916504 * exp(model.X[5]) + 469348.19855876261135563 * model.X[2]**-1 + 42899752.173020422458649 * model.X[4]**-1 - 44015813325.611709594727 * model.X[5]**-1 + 340.23792585674152633146 * model.X[4]**2 + 18067474593.173576354980 * model.X[5]**2 + 10835.790537672819482395 * model.X[2]**3 + 0.20611657912140009732173e-6 * model.X[1]**4 - 3964314.7577035818248987 * (model.X[1]*model.X[2])**-1 - 243331.92840171771240421 * (model.X[2]*model.X[5])**-1 + 8185.5896550469133217121 * (model.X[3]*model.X[4])**-1 - 21277489.012485824525356 * (model.X[4]*model.X[5])**-1 - 0.59149092966189875664185 * (model.X[3]*model.X[4])**2 - 172.08689532552318723901 * (model.X[4]*model.X[5])**2 + 0.61783331538874304046660e-4 * (model.X[1]*model.X[2])**3 - 5365.7574138345235041925 * (model.X[2]*model.X[5])**3 + 0.14558258231600064783184e-1 * (model.X[3]*model.X[4])**3 - 0.25999040191812988803206e-6 * (model.X[1]*model.X[5])**4 - 0.59061976033053230372184e-4 * (model.X[3]*model.X[4])**4 + 3940451.8413518862798810 * (model.X[1]*model.X[2]*model.X[5])**-1 - 7692.9374032702717158827 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.57770982305210738516621 * (model.X[3]*model.X[4]*model.X[5])**2 - 0.63528331796922692608319e-4 * (model.X[1]*model.X[2]*model.X[5])**3 - 0.14648641095378037504937e-1 * (model.X[3]*model.X[4]*model.X[5])**3 + 0.60073247739369504450985e-4 * (model.X[3]*model.X[4]*model.X[5])**4 - 225903.59365459292894229 * (model.X[2]/model.X[5])**-1 - 195.07681884189406673613 * (model.X[4]/model.X[3])**-1 - 21623486.855761367827654 * (model.X[4]/model.X[5])**-1 - 2447.5057114358805847587 * (model.X[5]/model.X[3])**-1 - 168.18489067455158192388 * (model.X[4]/model.X[5])**2 - 5462.9715302594267996028 * (model.X[2]/model.X[5])**3

                elif objective == 'mxr':
                    def Y1_constraint(m):
                        return model.Y[1] == - 51.330257449430732208384 * model.X[1] - 5.0610094488737296103409 * model.X[2] + 100.19458009307722079484 * model.X[3] + 0.14475893708263642273293e-1 * model.X[4] + 8498873.9873486142605543 * model.X[5] + 9630.5932184821795090102 * log(model.X[1]) + 4.7201342249599820277695 * log(model.X[2]) + 0.66959194937916477474715 * log(model.X[3]) - 17362854.149148397147655 * log(model.X[5]) - 0.28689314592276649040770 * exp(model.X[2]) + 59745.290310756710823625 * exp(model.X[5]) + 212.52005710135114213699 * model.X[2]**-1 - 873696.48076143395155668 * model.X[4]**-1 - 8706825.8050181288272142 * model.X[5]**-1 + 0.66354814111366719475704e-1 * model.X[1]**2 - 59.872494502194612664425 * model.X[2]**2 - 48496.439557627010799479 * (model.X[1]*model.X[2])**-1 + 596735.84695780696347356 * (model.X[1]*model.X[5])**-1 - 210.07252742317783145154 * (model.X[2]*model.X[5])**-1 - 561.25503969519036218117 * (model.X[3]*model.X[4])**-1 + 435366.69106276915408671 * (model.X[4]*model.X[5])**-1 + 0.21159757439367030129596e-2 * (model.X[1]*model.X[2])**2 - 0.21135276296272827167844e-1 * (model.X[1]*model.X[5])**2 + 62.229795904877072132422 * (model.X[2]*model.X[5])**2 + 0.32129132141857592863676e-1 * (model.X[3]*model.X[4])**2 - 0.10661557439506847745365e-3 * (model.X[3]*model.X[4])**3 + 48233.387091234500985593 * (model.X[1]*model.X[2]*model.X[5])**-1 + 1161.9360898312615972827 * (model.X[1]*model.X[3]*model.X[4])**-1 + 560.09636715632120740338 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.21526527209936832836512e-2 * (model.X[1]*model.X[2]*model.X[5])**2 - 0.32810122689748033586454e-1 * (model.X[3]*model.X[4]*model.X[5])**2 + 0.11006478471915462802756e-3 * (model.X[3]*model.X[4]*model.X[5])**3 - 2.8461417064741620919222 * (model.X[4]/model.X[3])**-1 + 438321.89819736446952447 * (model.X[4]/model.X[5])**-1 - 99.285090704890222923495 * (model.X[5]/model.X[3])**-1

                def Y2_constraint(m):
                    return model.Y[2] == 68.313937594997256042006 * model.X[1] - 276.52440480278204404385 * model.X[2] + 266.30485326490548914080 * model.X[3] + 3.9383537905213552576811 * model.X[4] - 18129330.036369357258081 * model.X[5] - 20037.602069136399222771 * log(model.X[1]) + 51.757254216481364039737 * log(model.X[2]) - 163.80510796598980505223 * log(model.X[3]) - 35.106574810488240245832 * log(model.X[4]) + 37695002.717561811208725 * log(model.X[5]) - 11.186983392230608558293 * exp(model.X[2]) - 2.2929330134866496848645 * exp(model.X[3]) - 247649.55129976227181032 * exp(model.X[5]) - 141132.97376567139872350 * model.X[2]**-1 + 55214.100827661699440796 * model.X[3]**-1 - 519671.16079334757523611 * model.X[4]**-1 + 18902972.392811663448811 * model.X[5]**-1 - 14946.513167081722713192 * model.X[2]**2 - 74.583085441396733017427 * model.X[3]**2 - 22.426854437112886841987 * model.X[4]**2 + 29.236297562919467907250 * model.X[3]**3 - 628971.31167296983767301 * (model.X[1]*model.X[2])**-1 + 309953.63477100781165063 * (model.X[1]*model.X[3])**-1 - 3935416.6517384862527251 * (model.X[1]*model.X[4])**-1 - 1526879.5313034639693797 * (model.X[1]*model.X[5])**-1 - 72.761034507205451404843 * (model.X[2]*model.X[3])**-1 - 2100.5541907052656824817 * (model.X[2]*model.X[4])**-1 + 68208.037477876510820352 * (model.X[2]*model.X[5])**-1 + 10899.789284635196963791 * (model.X[3]*model.X[4])**-1 - 26154.136780005166656338 * (model.X[3]*model.X[5])**-1 + 256775.70530217327177525 * (model.X[4]*model.X[5])**-1 - 0.20332596580598879393298e-1 * (model.X[1]*model.X[2])**2 - 0.53015669218685200936737e-4 * (model.X[1]*model.X[3])**2 - 0.30218095551286993451267e-4 * (model.X[1]*model.X[4])**2 - 12.761172781779789531242 * (model.X[2]*model.X[3])**2 - 0.18620822800893077619833 * (model.X[2]*model.X[4])**2 + 7114.1649373670379645773 * (model.X[2]*model.X[5])**2 + 0.78662973741045296490609e-3 * (model.X[3]*model.X[4])**2 + 10.832055567596386325135 * (model.X[4]*model.X[5])**2 - 0.18908524184551742810894e-5 * (model.X[1]*model.X[2])**3 - 0.27668518063082619875409e-5 * (model.X[1]*model.X[3])**3 + 0.15486700677056136621346 * (model.X[2]*model.X[3])**3 + 0.82206307592956693458541e-3 * (model.X[2]*model.X[4])**3 - 0.11401143785378468615936e-4 * (model.X[3]*model.X[4])**3 - 14.261888060435495617639 * (model.X[3]*model.X[5])**3 - 0.18505293274018204476196e-6 * (model.X[1]*model.X[5])**4 + 2.8652341090711055393569 * (model.X[2]*model.X[5])**4 + 0.30394383464297563468314e-7 * (model.X[3]*model.X[4])**4 - 0.92452865495730529588059 * (model.X[3]*model.X[5])**4 - 0.15028051220832014194494e-3 * (model.X[2]*model.X[3])**6 - 3581.9107916183934321452 * (model.X[1]*model.X[2]*model.X[3])**-1 - 135951.07889005556353368 * (model.X[1]*model.X[2]*model.X[4])**-1 + 637174.99097566399723291 * (model.X[1]*model.X[2]*model.X[5])**-1 - 174599.85746857922640629 * (model.X[1]*model.X[3]*model.X[4])**-1 - 339577.57629136863397434 * (model.X[1]*model.X[3]*model.X[5])**-1 + 2917577.5320865511894226 * (model.X[1]*model.X[4]*model.X[5])**-1 + 72.054300014072893532102 * (model.X[2]*model.X[3]*model.X[4])**-1 + 89.009146741913511391431 * (model.X[2]*model.X[3]*model.X[5])**-1 + 2803.3875496647751788259 * (model.X[2]*model.X[4]*model.X[5])**-1 - 10032.771006534456319059 * (model.X[3]*model.X[4]*model.X[5])**-1 + 0.11066709211944583466911e-8 * (model.X[1]*model.X[2]*model.X[4])**2 + 0.22809772458790154164854e-1 * (model.X[1]*model.X[2]*model.X[5])**2 + 0.30413419781175371101826e-4 * (model.X[1]*model.X[4]*model.X[5])**2 + 0.16854507263599214413746e-2 * (model.X[2]*model.X[3]*model.X[4])**2 + 11.819722863944807755843 * (model.X[2]*model.X[3]*model.X[5])**2 + 0.18888066062769920394615 * (model.X[2]*model.X[4]*model.X[5])**2 + 0.28284130640815742001250e-5 * (model.X[1]*model.X[3]*model.X[5])**3 - 0.94811238446415675766793e-5 * (model.X[2]*model.X[3]*model.X[4])**3 - 0.84010553383876990923840e-3 * (model.X[2]*model.X[4]*model.X[5])**3 + 0.16394375915519116116439e-7 * (model.X[2]*model.X[3]*model.X[4])**4 + 34615.122642150767205749 * (model.X[1]/model.X[2])**-1 - 4901.0783258796000154689 * (model.X[1]/model.X[3])**-1 - 515.56084318141438416205 * (model.X[1]/model.X[4])**-1 + 0.82070732504803289852902e-1 * (model.X[2]/model.X[4])**-1 + 72893.347470748267369345 * (model.X[2]/model.X[5])**-1 - 1.2048583450690100171698 * (model.X[3]/model.X[1])**-1 - 0.43198087573224262791793e-1 * (model.X[3]/model.X[4])**-1 - 28714.000326817276800284 * (model.X[3]/model.X[5])**-1 - 34.109305951745980678425 * (model.X[4]/model.X[1])**-1 + 77.973393385456404303113 * (model.X[4]/model.X[2])**-1 + 274432.71972346963593736 * (model.X[4]/model.X[5])**-1 + 7797.3591651741053283331 * (model.X[2]/model.X[5])**2 + 11.582775726322406484314 * (model.X[4]/model.X[5])**2

                def Y3_constraint(m):
                    return model.Y[3] == - 0.45812661321038811168549e-1 * model.X[1] - 0.41561248256308225279554 * model.X[2] - 0.87193742597286727491479 * model.X[3] - 0.79699655085408649402012 * model.X[4] - 599996.54073481110390276 * model.X[5] + 21.449803226720000282057 * log(model.X[1]) + 0.27269845620335614322371 * log(model.X[2]) + 26.330290585603087549771 * log(model.X[3]) - 16.079713956580945932728 * log(model.X[4]) + 1228269.7602106935810298 * log(model.X[5]) - 0.46343396280011751875438e-1 * exp(model.X[2]) - 1.3877538304463492568885 * exp(model.X[3]) - 5227.7772401148495191592 * exp(model.X[5]) - 96.912559985496471881561 * model.X[2]**-1 - 0.93450782231789653042853 * model.X[3]**-1 - 83278.708175355670391582 * model.X[4]**-1 + 614146.98496478144079447 * model.X[5]**-1 + 0.82613012880153151307194e-2 * model.X[4]**2 + 0.37409651354226608477305 * model.X[3]**3 - 0.52499330776723841796017e-4 * model.X[4]**3 + 0.37692362725618371033232e-1 * model.X[3]**5 + 19471.829712407008628361 * (model.X[1]*model.X[2])**-1 + 47.320624269495404234931 * (model.X[1]*model.X[3])**-1 - 1538.0213026128392357350 * (model.X[1]*model.X[4])**-1 + 2603.8297096884184611554 * (model.X[1]*model.X[5])**-1 - 0.18223510791190614122037 * (model.X[2]*model.X[3])**-1 - 6.2146573458739204909307 * (model.X[2]*model.X[4])**-1 + 97.002111061359968857687 * (model.X[2]*model.X[5])**-1 + 40.706149525242018683002 * (model.X[3]*model.X[4])**-1 - 3.1473528111380466576463 * (model.X[3]*model.X[5])**-1 + 41316.363430164412420709 * (model.X[4]*model.X[5])**-1 + 0.62501599658422000253539e-5 * (model.X[1]*model.X[2])**2 + 0.63858616664178921917638e-8 * (model.X[1]*model.X[4])**2 - 0.79892452422077472884432e-1 * (model.X[2]*model.X[3])**2 - 0.88239469594564046714749e-4 * (model.X[2]*model.X[4])**2 + 0.15435597308637583058299e-2 * (model.X[3]*model.X[4])**2 + 0.17987079939073925827220e-1 * (model.X[2]*model.X[3])**3 + 0.51924805054838963218772e-6 * (model.X[2]*model.X[4])**3 - 0.14338744466439841952180e-4 * (model.X[3]*model.X[4])**3 - 0.12112381961597550039667e-2 * (model.X[2]*model.X[3])**4 + 0.41913027181664960944883e-7 * (model.X[3]*model.X[4])**4 - 19412.255679816673364257 * (model.X[1]*model.X[2]*model.X[5])**-1 + 4.3786090179700307700728 * (model.X[2]*model.X[3]*model.X[4])**-1 + 0.11348678462955824357580e-8 * (model.X[1]*model.X[3]*model.X[4])**2 + 0.94356067319645520402940e-4 * (model.X[2]*model.X[3]*model.X[4])**2 - 0.17773745644371891571093e-9 * (model.X[1]*model.X[2]*model.X[3])**3 - 0.52781237988945083531949e-6 * (model.X[2]*model.X[3]*model.X[4])**3 + 0.91983120095250859481360e-9 * (model.X[2]*model.X[3]*model.X[4])**4 - 0.94125321425868446051366e-2 * (model.X[2]/model.X[3])**-1 - 0.23169416027288315673704e-2 * (model.X[2]/model.X[4])**-1 + 1.3104054713300479217963 * (model.X[3]/model.X[4])**-1 - 238.10784369203281585214 * (model.X[4]/model.X[3])**-1 + 41935.103383107802073937 * (model.X[4]/model.X[5])**-1 + 783.71688513554988730903 * (model.X[3]/model.X[4])**2 - 0.14345261881378424881350e-1 * (model.X[4]/model.X[3])**2 - 1458.9020447332623007242 * (model.X[3]/model.X[4])**3 + 0.10703777166358499877818e-3 * (model.X[4]/model.X[3])**3 + 971.09992798850259987375 * (model.X[3]/model.X[4])**4 - 0.34809850461631072782243e-6 * (model.X[4]/model.X[3])**4

                def Y4_constraint(m):
                    return model.Y[4] == - 0.33401610516840536495298e-2 * model.X[1] - 4.2772929472918947979565 * model.X[3] + 0.41150570288332621871064 * model.X[4] - 287194549979.04211425781 * model.X[5] + 4.1911688029222577966948 * log(model.X[3]) + 0.31814835411727568348361e-1 * log(model.X[4]) + 236542296681.43798828125 * log(model.X[5]) - 1.8543967526870890338841 * exp(model.X[3]) + 101202451348.84477233887 * exp(model.X[5]) - 1284.8036483354603660700 * model.X[3]**-1 + 79891916108.220687866211 * model.X[5]**-1 + 2.8977743303747818259808 * model.X[3]**2 - 65553072106.442070007324 * model.X[5]**2 + 0.13636245388608643491768e-1 * model.X[3]**6 - 2241078513.7784895896912 * model.X[5]**6 - 83.711142037733893062068 * (model.X[3]*model.X[4])**-1 + 641.69616513556866266299 * (model.X[3]*model.X[5])**-1 + 0.26688234292315798218409e-2 * (model.X[3]*model.X[4])**2 - 0.83371301093660351590707e-5 * (model.X[3]*model.X[4])**3 + 0.92334345112395785348802e-1 * (model.X[3]*model.X[5])**4 - 0.47782268669472743871651e-2 * (model.X[3]*model.X[5])**6 + 84.012179796443547274976 * (model.X[3]*model.X[4]*model.X[5])**-1 - 0.27339854670495552547982e-2 * (model.X[3]*model.X[4]*model.X[5])**2 + 0.86589808111271595252945e-5 * (model.X[3]*model.X[4]*model.X[5])**3 + 644.08192008395724315051 * (model.X[3]/model.X[5])**-1 - 0.47214688509964952700670 * (model.X[4]/model.X[3])**-1 - 0.40758662537253570468110 * (model.X[5]/model.X[4])**-1 - 10999.800058761427862919 * (model.X[5]/model.X[1])**2


        model.Y1Constr = Constraint(rule=Y1_constraint)
        model.Y2Constr = Constraint(rule=Y2_constraint)
        model.Y3Constr = Constraint(rule=Y3_constraint)
        model.Y4Constr = Constraint(rule=Y4_constraint)



        ## 2.5 Objective function
        model.Obj = Objective(expr=model.Y[1], sense=maximize)


        ## 3. Solution
        solver_factory= SolverFactory(solver)
        solver_factory.options['MaxTime'] = 500

        t2 = perf_counter()
        print("Elapsed time to set up model in PYOMO: ", t2-t1, "sec")

        results = solver_factory.solve(model, tee=True)

        model.X.pprint()
        model.Y.pprint()

        t3 = perf_counter()
        print("Elapsed time to solve model with", solver, ": ", t3-t2, "sec")
        print("Elapsed total time to solve MINLP: ", t3-t1, "sec")

        ## 4. Output
        rxdict = dict()
        rydict = dict()
        for i in range(dim[0]):
            rxdict[dictData["frame_px"][i]] = [model.X[i+1].value]
        for i in range(dim[1]):
            rydict[dictData["frame_py"][i]] =[model.Y[i+1].value]

        dictData["time"] = np.array([t1,t2,t3])
        dictData["rX"] = rxdict
        dictData["rY"] = rydict
